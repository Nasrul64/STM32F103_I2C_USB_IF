
I2C_USB_IF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f68  08008f68  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008f68  08008f68  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f68  08008f68  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f68  08008f68  00018f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f6c  08008f6c  00018f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d74  2000017c  080090ec  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  080090ec  00020ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101b9  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f76  00000000  00000000  0003035e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000332d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f65  00000000  00000000  00034c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a28  00000000  00000000  0004ebed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873ca  00000000  00000000  00061615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e89df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000e8a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ed4 	.word	0x08008ed4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008ed4 	.word	0x08008ed4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b34      	ldr	r3, [pc, #208]	; (8000244 <MX_GPIO_Init+0xe8>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a33      	ldr	r2, [pc, #204]	; (8000244 <MX_GPIO_Init+0xe8>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b31      	ldr	r3, [pc, #196]	; (8000244 <MX_GPIO_Init+0xe8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b2e      	ldr	r3, [pc, #184]	; (8000244 <MX_GPIO_Init+0xe8>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a2d      	ldr	r2, [pc, #180]	; (8000244 <MX_GPIO_Init+0xe8>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b2b      	ldr	r3, [pc, #172]	; (8000244 <MX_GPIO_Init+0xe8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b28      	ldr	r3, [pc, #160]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a27      	ldr	r2, [pc, #156]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b25      	ldr	r3, [pc, #148]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b22      	ldr	r3, [pc, #136]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a21      	ldr	r2, [pc, #132]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	481c      	ldr	r0, [pc, #112]	; (8000248 <MX_GPIO_Init+0xec>)
 80001d8:	f000 fde8 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80001e2:	2311      	movs	r3, #17
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	4814      	ldr	r0, [pc, #80]	; (8000248 <MX_GPIO_Init+0xec>)
 80001f6:	f000 fc55 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80001fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80001fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000200:	2303      	movs	r3, #3
 8000202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	480f      	ldr	r0, [pc, #60]	; (8000248 <MX_GPIO_Init+0xec>)
 800020c:	f000 fc4a 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000210:	f248 73ff 	movw	r3, #34815	; 0x87ff
 8000214:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000216:	2303      	movs	r3, #3
 8000218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480a      	ldr	r0, [pc, #40]	; (800024c <MX_GPIO_Init+0xf0>)
 8000222:	f000 fc3f 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000226:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800022a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800022c:	2303      	movs	r3, #3
 800022e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4806      	ldr	r0, [pc, #24]	; (8000250 <MX_GPIO_Init+0xf4>)
 8000238:	f000 fc34 	bl	8000aa4 <HAL_GPIO_Init>

}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40021000 	.word	0x40021000
 8000248:	40011000 	.word	0x40011000
 800024c:	40010800 	.word	0x40010800
 8000250:	40010c00 	.word	0x40010c00

08000254 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_I2C1_Init+0x50>)
 800025a:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <MX_I2C1_Init+0x54>)
 800025c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_I2C1_Init+0x50>)
 8000260:	4a12      	ldr	r2, [pc, #72]	; (80002ac <MX_I2C1_Init+0x58>)
 8000262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_I2C1_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <MX_I2C1_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <MX_I2C1_Init+0x50>)
 8000272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <MX_I2C1_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <MX_I2C1_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <MX_I2C1_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <MX_I2C1_Init+0x50>)
 800028c:	2200      	movs	r2, #0
 800028e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000290:	4804      	ldr	r0, [pc, #16]	; (80002a4 <MX_I2C1_Init+0x50>)
 8000292:	f000 fda3 	bl	8000ddc <HAL_I2C_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800029c:	f000 f9d8 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000198 	.word	0x20000198
 80002a8:	40005400 	.word	0x40005400
 80002ac:	000186a0 	.word	0x000186a0

080002b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <HAL_I2C_MspInit+0x90>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d132      	bne.n	8000336 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <HAL_I2C_MspInit+0x94>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <HAL_I2C_MspInit+0x94>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <HAL_I2C_MspInit+0x94>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0308 	and.w	r3, r3, #8
 80002e4:	613b      	str	r3, [r7, #16]
 80002e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80002e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80002ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002ee:	2312      	movs	r3, #18
 80002f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002f2:	2303      	movs	r3, #3
 80002f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4619      	mov	r1, r3
 80002fc:	4812      	ldr	r0, [pc, #72]	; (8000348 <HAL_I2C_MspInit+0x98>)
 80002fe:	f000 fbd1 	bl	8000aa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_I2C_MspInit+0x9c>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
 8000308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
 8000310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	627b      	str	r3, [r7, #36]	; 0x24
 8000318:	4a0c      	ldr	r2, [pc, #48]	; (800034c <HAL_I2C_MspInit+0x9c>)
 800031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <HAL_I2C_MspInit+0x94>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <HAL_I2C_MspInit+0x94>)
 8000324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000328:	61d3      	str	r3, [r2, #28]
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <HAL_I2C_MspInit+0x94>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000336:	bf00      	nop
 8000338:	3728      	adds	r7, #40	; 0x28
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40005400 	.word	0x40005400
 8000344:	40021000 	.word	0x40021000
 8000348:	40010c00 	.word	0x40010c00
 800034c:	40010000 	.word	0x40010000

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000356:	f000 fa11 	bl	800077c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035a:	f000 f8b7 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035e:	f7ff fefd 	bl	800015c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000362:	f007 ffc5 	bl	80082f0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000366:	f7ff ff75 	bl	8000254 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  for(int i=0;i<3;i++)
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
 800036e:	e00e      	b.n	800038e <main+0x3e>
  {
	  HAL_Delay(250); setLED(1);
 8000370:	20fa      	movs	r0, #250	; 0xfa
 8000372:	f000 fa65 	bl	8000840 <HAL_Delay>
 8000376:	2001      	movs	r0, #1
 8000378:	f000 f902 	bl	8000580 <setLED>
	  HAL_Delay(250); setLED(0);
 800037c:	20fa      	movs	r0, #250	; 0xfa
 800037e:	f000 fa5f 	bl	8000840 <HAL_Delay>
 8000382:	2000      	movs	r0, #0
 8000384:	f000 f8fc 	bl	8000580 <setLED>
  for(int i=0;i<3;i++)
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	3301      	adds	r3, #1
 800038c:	61fb      	str	r3, [r7, #28]
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	2b02      	cmp	r3, #2
 8000392:	dded      	ble.n	8000370 <main+0x20>
  uint8_t tempLength;
  uint8_t tempTimeOut;

  while (1)
  {
	  if(CDC_GetRxBufferBytesAvailable_FS()>0)
 8000394:	f008 f982 	bl	800869c <CDC_GetRxBufferBytesAvailable_FS>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0fa      	beq.n	8000394 <main+0x44>
	  {
		  memset(oBuf, 0, CMD_REP_BUFSIZE);
 800039e:	463b      	mov	r3, r7
 80003a0:	220a      	movs	r2, #10
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f008 fd8d 	bl	8008ec4 <memset>

		  if(CDC_ReadRxBuffer_FS(iBuf, 1)==USB_CDC_RX_BUFFER_OK)
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2101      	movs	r1, #1
 80003b0:	4618      	mov	r0, r3
 80003b2:	f008 f93b 	bl	800862c <CDC_ReadRxBuffer_FS>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1eb      	bne.n	8000394 <main+0x44>
		  {
			  if(iBuf[0]==0x5A && CDC_GetRxBufferBytesAvailable_FS()>=3)
 80003bc:	7b3b      	ldrb	r3, [r7, #12]
 80003be:	2b5a      	cmp	r3, #90	; 0x5a
 80003c0:	d159      	bne.n	8000476 <main+0x126>
 80003c2:	f008 f96b 	bl	800869c <CDC_GetRxBufferBytesAvailable_FS>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d954      	bls.n	8000476 <main+0x126>
			  {
				  if(CDC_ReadRxBuffer_FS(iBuf, 3)==USB_CDC_RX_BUFFER_OK)
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	2103      	movs	r1, #3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f008 f92a 	bl	800862c <CDC_ReadRxBuffer_FS>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d170      	bne.n	80004c0 <main+0x170>
				  {
					  temp7bitAddr = iBuf[0]>>1;
 80003de:	7b3b      	ldrb	r3, [r7, #12]
 80003e0:	085b      	lsrs	r3, r3, #1
 80003e2:	76fb      	strb	r3, [r7, #27]
					  tempLength = iBuf[1];
 80003e4:	7b7b      	ldrb	r3, [r7, #13]
 80003e6:	76bb      	strb	r3, [r7, #26]
					  tempTimeOut = iBuf[2];
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	767b      	strb	r3, [r7, #25]

					  if(iBuf[0] & 0x1)
 80003ec:	7b3b      	ldrb	r3, [r7, #12]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d01c      	beq.n	8000430 <main+0xe0>
					  {
						  // I2C Read

						  bSucc = ReadI2C(temp7bitAddr, &oBuf[2], tempLength, tempTimeOut);
 80003f6:	7e7c      	ldrb	r4, [r7, #25]
 80003f8:	7eba      	ldrb	r2, [r7, #26]
 80003fa:	463b      	mov	r3, r7
 80003fc:	1c99      	adds	r1, r3, #2
 80003fe:	7ef8      	ldrb	r0, [r7, #27]
 8000400:	4623      	mov	r3, r4
 8000402:	f000 f8d5 	bl	80005b0 <ReadI2C>
 8000406:	4603      	mov	r3, r0
 8000408:	763b      	strb	r3, [r7, #24]

						  oBuf[0] = 0xA5;
 800040a:	23a5      	movs	r3, #165	; 0xa5
 800040c:	703b      	strb	r3, [r7, #0]
						  oBuf[1] = bSucc?0x0F:0xF0;
 800040e:	7e3b      	ldrb	r3, [r7, #24]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <main+0xc8>
 8000414:	230f      	movs	r3, #15
 8000416:	e000      	b.n	800041a <main+0xca>
 8000418:	23f0      	movs	r3, #240	; 0xf0
 800041a:	707b      	strb	r3, [r7, #1]

						  CDC_Transmit_FS(oBuf, 2 + tempLength);
 800041c:	7ebb      	ldrb	r3, [r7, #26]
 800041e:	b29b      	uxth	r3, r3
 8000420:	3302      	adds	r3, #2
 8000422:	b29a      	uxth	r2, r3
 8000424:	463b      	mov	r3, r7
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f008 f8d9 	bl	80085e0 <CDC_Transmit_FS>
				  if(CDC_ReadRxBuffer_FS(iBuf, 3)==USB_CDC_RX_BUFFER_OK)
 800042e:	e047      	b.n	80004c0 <main+0x170>
					  }
					  else if(CDC_ReadRxBuffer_FS(iBuf, tempLength)==USB_CDC_RX_BUFFER_OK)
 8000430:	7ebb      	ldrb	r3, [r7, #26]
 8000432:	b29a      	uxth	r2, r3
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4611      	mov	r1, r2
 800043a:	4618      	mov	r0, r3
 800043c:	f008 f8f6 	bl	800862c <CDC_ReadRxBuffer_FS>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d13c      	bne.n	80004c0 <main+0x170>
					  {
						  // I2C Write

						  bSucc = WriteI2C(temp7bitAddr, iBuf, tempLength, tempTimeOut);
 8000446:	7e7b      	ldrb	r3, [r7, #25]
 8000448:	7eba      	ldrb	r2, [r7, #26]
 800044a:	f107 010c 	add.w	r1, r7, #12
 800044e:	7ef8      	ldrb	r0, [r7, #27]
 8000450:	f000 f8d6 	bl	8000600 <WriteI2C>
 8000454:	4603      	mov	r3, r0
 8000456:	763b      	strb	r3, [r7, #24]

						  oBuf[0] = 0xA5;
 8000458:	23a5      	movs	r3, #165	; 0xa5
 800045a:	703b      	strb	r3, [r7, #0]
						  oBuf[1] = bSucc?0x0F:0xF0;
 800045c:	7e3b      	ldrb	r3, [r7, #24]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <main+0x116>
 8000462:	230f      	movs	r3, #15
 8000464:	e000      	b.n	8000468 <main+0x118>
 8000466:	23f0      	movs	r3, #240	; 0xf0
 8000468:	707b      	strb	r3, [r7, #1]

						  CDC_Transmit_FS(oBuf, 2);
 800046a:	463b      	mov	r3, r7
 800046c:	2102      	movs	r1, #2
 800046e:	4618      	mov	r0, r3
 8000470:	f008 f8b6 	bl	80085e0 <CDC_Transmit_FS>
				  if(CDC_ReadRxBuffer_FS(iBuf, 3)==USB_CDC_RX_BUFFER_OK)
 8000474:	e024      	b.n	80004c0 <main+0x170>
					  }
				  }
			  }
			  else if(iBuf[0]=='c'||iBuf[0]=='C')
 8000476:	7b3b      	ldrb	r3, [r7, #12]
 8000478:	2b63      	cmp	r3, #99	; 0x63
 800047a:	d002      	beq.n	8000482 <main+0x132>
 800047c:	7b3b      	ldrb	r3, [r7, #12]
 800047e:	2b43      	cmp	r3, #67	; 0x43
 8000480:	d102      	bne.n	8000488 <main+0x138>
			  {
				  CDC_FlushRxBuffer_FS();
 8000482:	f008 f921 	bl	80086c8 <CDC_FlushRxBuffer_FS>
 8000486:	e01c      	b.n	80004c2 <main+0x172>
			  }
			  else if(iBuf[0]=='h'||iBuf[0]=='H')
 8000488:	7b3b      	ldrb	r3, [r7, #12]
 800048a:	2b68      	cmp	r3, #104	; 0x68
 800048c:	d003      	beq.n	8000496 <main+0x146>
 800048e:	7b3b      	ldrb	r3, [r7, #12]
 8000490:	2b48      	cmp	r3, #72	; 0x48
 8000492:	f47f af7f 	bne.w	8000394 <main+0x44>
			  {
				  USB_TX("HelloWorld");
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <main+0x174>)
 8000498:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <main+0x178>)
 800049a:	ca07      	ldmia	r2, {r0, r1, r2}
 800049c:	c303      	stmia	r3!, {r0, r1}
 800049e:	801a      	strh	r2, [r3, #0]
 80004a0:	3302      	adds	r3, #2
 80004a2:	0c12      	lsrs	r2, r2, #16
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <main+0x174>)
 80004a8:	f7ff fe50 	bl	800014c <strlen>
 80004ac:	4603      	mov	r3, r0
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	4619      	mov	r1, r3
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <main+0x174>)
 80004b4:	f008 f894 	bl	80085e0 <CDC_Transmit_FS>
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 f9c1 	bl	8000840 <HAL_Delay>
 80004be:	e769      	b.n	8000394 <main+0x44>
				  if(CDC_ReadRxBuffer_FS(iBuf, 3)==USB_CDC_RX_BUFFER_OK)
 80004c0:	bf00      	nop
	  if(CDC_GetRxBufferBytesAvailable_FS()>0)
 80004c2:	e767      	b.n	8000394 <main+0x44>
 80004c4:	200001ec 	.word	0x200001ec
 80004c8:	08008eec 	.word	0x08008eec

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b094      	sub	sp, #80	; 0x50
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004d6:	2228      	movs	r2, #40	; 0x28
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f008 fcf2 	bl	8008ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000504:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	2302      	movs	r3, #2
 8000510:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000518:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800051c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000522:	4618      	mov	r0, r3
 8000524:	f003 f8ec 	bl	8003700 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800052e:	f000 f88f 	bl	8000650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000542:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2102      	movs	r1, #2
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fb58 	bl	8003c04 <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800055a:	f000 f879 	bl	8000650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800055e:	2310      	movs	r3, #16
 8000560:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fccf 	bl	8003f0c <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000574:	f000 f86c 	bl	8000650 <Error_Handler>
  }
}
 8000578:	bf00      	nop
 800057a:	3750      	adds	r7, #80	; 0x50
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <setLED>:

/* USER CODE BEGIN 4 */
void setLED(uint8_t bOn)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, bOn? GPIO_PIN_RESET:GPIO_PIN_SET);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	bf0c      	ite	eq
 8000590:	2301      	moveq	r3, #1
 8000592:	2300      	movne	r3, #0
 8000594:	b2db      	uxtb	r3, r3
 8000596:	461a      	mov	r2, r3
 8000598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <setLED+0x2c>)
 800059e:	f000 fc05 	bl	8000dac <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40011000 	.word	0x40011000

080005b0 <ReadI2C>:

uint8_t ReadI2C(uint8_t slv7bitAddr, uint8_t* data, uint8_t len, uint8_t timeout)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6039      	str	r1, [r7, #0]
 80005b8:	4611      	mov	r1, r2
 80005ba:	461a      	mov	r2, r3
 80005bc:	4603      	mov	r3, r0
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	460b      	mov	r3, r1
 80005c2:	71bb      	strb	r3, [r7, #6]
 80005c4:	4613      	mov	r3, r2
 80005c6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef halStat = HAL_I2C_Master_Receive(&hi2c1, slv7bitAddr<<1, data, len, timeout);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	b299      	uxth	r1, r3
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	797b      	ldrb	r3, [r7, #5]
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	4613      	mov	r3, r2
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <ReadI2C+0x4c>)
 80005de:	f000 fe3f 	bl	8001260 <HAL_I2C_Master_Receive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]

	return halStat==HAL_OK?1:0;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000198 	.word	0x20000198

08000600 <WriteI2C>:

uint8_t WriteI2C(uint8_t slv7bitAddr, uint8_t* data, uint8_t len, uint8_t timeout)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	6039      	str	r1, [r7, #0]
 8000608:	4611      	mov	r1, r2
 800060a:	461a      	mov	r2, r3
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	460b      	mov	r3, r1
 8000612:	71bb      	strb	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef halStat = HAL_I2C_Master_Transmit(&hi2c1, slv7bitAddr<<1, data, len, timeout);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	b29b      	uxth	r3, r3
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	b299      	uxth	r1, r3
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	b29a      	uxth	r2, r3
 8000624:	797b      	ldrb	r3, [r7, #5]
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <WriteI2C+0x4c>)
 800062e:	f000 fd19 	bl	8001064 <HAL_I2C_Master_Transmit>
 8000632:	4603      	mov	r3, r0
 8000634:	73fb      	strb	r3, [r7, #15]

	return halStat==HAL_OK?1:0;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	2b00      	cmp	r3, #0
 800063a:	bf0c      	ite	eq
 800063c:	2301      	moveq	r3, #1
 800063e:	2300      	movne	r3, #0
 8000640:	b2db      	uxtb	r3, r3
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000198 	.word	0x20000198

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>
	...

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_MspInit+0x5c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_MspInit+0x5c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x5c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <HAL_MspInit+0x5c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_MspInit+0x60>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_MspInit+0x60>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000706:	f000 f87f 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000716:	f001 fc60 	bl	8001fda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200009e4 	.word	0x200009e4

08000724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000732:	490d      	ldr	r1, [pc, #52]	; (8000768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000734:	4a0d      	ldr	r2, [pc, #52]	; (800076c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000748:	4c0a      	ldr	r4, [pc, #40]	; (8000774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000756:	f7ff ffe5 	bl	8000724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075a:	f008 fb8f 	bl	8008e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075e:	f7ff fdf7 	bl	8000350 <main>
  bx lr
 8000762:	4770      	bx	lr
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800076c:	08008f70 	.word	0x08008f70
  ldr r2, =_sbss
 8000770:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000774:	20000ef0 	.word	0x20000ef0

08000778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC1_2_IRQHandler>
	...

0800077c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_Init+0x28>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <HAL_Init+0x28>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f947 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f808 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff ff60 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40022000 	.word	0x40022000

080007a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x54>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x58>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f95f 	bl	8000a8a <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00e      	b.n	80007f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d80a      	bhi.n	80007f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f927 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <HAL_InitTick+0x5c>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e000      	b.n	80007f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000008 	.word	0x20000008
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x1c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x20>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a03      	ldr	r2, [pc, #12]	; (8000828 <HAL_IncTick+0x20>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000008 	.word	0x20000008
 8000828:	200002ec 	.word	0x200002ec

0800082c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return uwTick;
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <HAL_GetTick+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	200002ec 	.word	0x200002ec

08000840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000848:	f7ff fff0 	bl	800082c <HAL_GetTick>
 800084c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000858:	d005      	beq.n	8000866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_Delay+0x44>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000866:	bf00      	nop
 8000868:	f7ff ffe0 	bl	800082c <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f7      	bhi.n	8000868 <HAL_Delay+0x28>
  {
  }
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4906      	ldr	r1, [pc, #24]	; (8000920 <__NVIC_EnableIRQ+0x34>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff90 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff2d 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff42 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff35 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffa2 	bl	80009dc <SysTick_Config>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b08b      	sub	sp, #44	; 0x2c
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e169      	b.n	8000d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	f040 8158 	bne.w	8000d86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	4a9a      	ldr	r2, [pc, #616]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d05e      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000ae0:	4a98      	ldr	r2, [pc, #608]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d875      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000ae6:	4a98      	ldr	r2, [pc, #608]	; (8000d48 <HAL_GPIO_Init+0x2a4>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d058      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000aec:	4a96      	ldr	r2, [pc, #600]	; (8000d48 <HAL_GPIO_Init+0x2a4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d86f      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000af2:	4a96      	ldr	r2, [pc, #600]	; (8000d4c <HAL_GPIO_Init+0x2a8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d052      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000af8:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <HAL_GPIO_Init+0x2a8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d869      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000afe:	4a94      	ldr	r2, [pc, #592]	; (8000d50 <HAL_GPIO_Init+0x2ac>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d04c      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000b04:	4a92      	ldr	r2, [pc, #584]	; (8000d50 <HAL_GPIO_Init+0x2ac>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d863      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000b0a:	4a92      	ldr	r2, [pc, #584]	; (8000d54 <HAL_GPIO_Init+0x2b0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d046      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000b10:	4a90      	ldr	r2, [pc, #576]	; (8000d54 <HAL_GPIO_Init+0x2b0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d85d      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d82a      	bhi.n	8000b70 <HAL_GPIO_Init+0xcc>
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d859      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000b1e:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <HAL_GPIO_Init+0x80>)
 8000b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b24:	08000b9f 	.word	0x08000b9f
 8000b28:	08000b79 	.word	0x08000b79
 8000b2c:	08000b8b 	.word	0x08000b8b
 8000b30:	08000bcd 	.word	0x08000bcd
 8000b34:	08000bd3 	.word	0x08000bd3
 8000b38:	08000bd3 	.word	0x08000bd3
 8000b3c:	08000bd3 	.word	0x08000bd3
 8000b40:	08000bd3 	.word	0x08000bd3
 8000b44:	08000bd3 	.word	0x08000bd3
 8000b48:	08000bd3 	.word	0x08000bd3
 8000b4c:	08000bd3 	.word	0x08000bd3
 8000b50:	08000bd3 	.word	0x08000bd3
 8000b54:	08000bd3 	.word	0x08000bd3
 8000b58:	08000bd3 	.word	0x08000bd3
 8000b5c:	08000bd3 	.word	0x08000bd3
 8000b60:	08000bd3 	.word	0x08000bd3
 8000b64:	08000bd3 	.word	0x08000bd3
 8000b68:	08000b81 	.word	0x08000b81
 8000b6c:	08000b95 	.word	0x08000b95
 8000b70:	4a79      	ldr	r2, [pc, #484]	; (8000d58 <HAL_GPIO_Init+0x2b4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d013      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b76:	e02c      	b.n	8000bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e029      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	3304      	adds	r3, #4
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e024      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e01f      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	330c      	adds	r3, #12
 8000b9a:	623b      	str	r3, [r7, #32]
          break;
 8000b9c:	e01a      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	623b      	str	r3, [r7, #32]
          break;
 8000baa:	e013      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d105      	bne.n	8000bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	611a      	str	r2, [r3, #16]
          break;
 8000bbe:	e009      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	615a      	str	r2, [r3, #20]
          break;
 8000bca:	e003      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e000      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          break;
 8000bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2bff      	cmp	r3, #255	; 0xff
 8000bd8:	d801      	bhi.n	8000bde <HAL_GPIO_Init+0x13a>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	e001      	b.n	8000be2 <HAL_GPIO_Init+0x13e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d802      	bhi.n	8000bf0 <HAL_GPIO_Init+0x14c>
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x152>
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	3b08      	subs	r3, #8
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	401a      	ands	r2, r3
 8000c08:	6a39      	ldr	r1, [r7, #32]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	431a      	orrs	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80b1 	beq.w	8000d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c24:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a4c      	ldr	r2, [pc, #304]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c3c:	4a48      	ldr	r2, [pc, #288]	; (8000d60 <HAL_GPIO_Init+0x2bc>)
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <HAL_GPIO_Init+0x2c0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d013      	beq.n	8000c90 <HAL_GPIO_Init+0x1ec>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a3f      	ldr	r2, [pc, #252]	; (8000d68 <HAL_GPIO_Init+0x2c4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00d      	beq.n	8000c8c <HAL_GPIO_Init+0x1e8>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3e      	ldr	r2, [pc, #248]	; (8000d6c <HAL_GPIO_Init+0x2c8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x1e4>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a3d      	ldr	r2, [pc, #244]	; (8000d70 <HAL_GPIO_Init+0x2cc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_GPIO_Init+0x1e0>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e006      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c84:	2304      	movs	r3, #4
 8000c86:	e004      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c90:	2300      	movs	r3, #0
 8000c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c94:	f002 0203 	and.w	r2, r2, #3
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ca2:	492f      	ldr	r1, [pc, #188]	; (8000d60 <HAL_GPIO_Init+0x2bc>)
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d006      	beq.n	8000cca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	492c      	ldr	r1, [pc, #176]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	600b      	str	r3, [r1, #0]
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4928      	ldr	r1, [pc, #160]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d006      	beq.n	8000cf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4922      	ldr	r1, [pc, #136]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	491e      	ldr	r1, [pc, #120]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	4918      	ldr	r1, [pc, #96]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4914      	ldr	r1, [pc, #80]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d021      	beq.n	8000d78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	490e      	ldr	r1, [pc, #56]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60cb      	str	r3, [r1, #12]
 8000d40:	e021      	b.n	8000d86 <HAL_GPIO_Init+0x2e2>
 8000d42:	bf00      	nop
 8000d44:	10320000 	.word	0x10320000
 8000d48:	10310000 	.word	0x10310000
 8000d4c:	10220000 	.word	0x10220000
 8000d50:	10210000 	.word	0x10210000
 8000d54:	10120000 	.word	0x10120000
 8000d58:	10110000 	.word	0x10110000
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40011400 	.word	0x40011400
 8000d74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_GPIO_Init+0x304>)
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	4909      	ldr	r1, [pc, #36]	; (8000da8 <HAL_GPIO_Init+0x304>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	3301      	adds	r3, #1
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	fa22 f303 	lsr.w	r3, r2, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f47f ae8e 	bne.w	8000ab8 <HAL_GPIO_Init+0x14>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	372c      	adds	r7, #44	; 0x2c
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	40010400 	.word	0x40010400

08000dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc8:	e003      	b.n	8000dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	041a      	lsls	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e12b      	b.n	8001046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d106      	bne.n	8000e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff fa54 	bl	80002b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2224      	movs	r2, #36	; 0x24
 8000e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e40:	f003 f832 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8000e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4a81      	ldr	r2, [pc, #516]	; (8001050 <HAL_I2C_Init+0x274>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d807      	bhi.n	8000e60 <HAL_I2C_Init+0x84>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4a80      	ldr	r2, [pc, #512]	; (8001054 <HAL_I2C_Init+0x278>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	bf94      	ite	ls
 8000e58:	2301      	movls	r3, #1
 8000e5a:	2300      	movhi	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	e006      	b.n	8000e6e <HAL_I2C_Init+0x92>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a7d      	ldr	r2, [pc, #500]	; (8001058 <HAL_I2C_Init+0x27c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	bf94      	ite	ls
 8000e68:	2301      	movls	r3, #1
 8000e6a:	2300      	movhi	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0e7      	b.n	8001046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4a78      	ldr	r2, [pc, #480]	; (800105c <HAL_I2C_Init+0x280>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	0c9b      	lsrs	r3, r3, #18
 8000e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	; (8001050 <HAL_I2C_Init+0x274>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d802      	bhi.n	8000eb0 <HAL_I2C_Init+0xd4>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	3301      	adds	r3, #1
 8000eae:	e009      	b.n	8000ec4 <HAL_I2C_Init+0xe8>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	4a69      	ldr	r2, [pc, #420]	; (8001060 <HAL_I2C_Init+0x284>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	099b      	lsrs	r3, r3, #6
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	495c      	ldr	r1, [pc, #368]	; (8001050 <HAL_I2C_Init+0x274>)
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d819      	bhi.n	8000f18 <HAL_I2C_Init+0x13c>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1e59      	subs	r1, r3, #1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef2:	1c59      	adds	r1, r3, #1
 8000ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ef8:	400b      	ands	r3, r1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00a      	beq.n	8000f14 <HAL_I2C_Init+0x138>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1e59      	subs	r1, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f12:	e051      	b.n	8000fb8 <HAL_I2C_Init+0x1dc>
 8000f14:	2304      	movs	r3, #4
 8000f16:	e04f      	b.n	8000fb8 <HAL_I2C_Init+0x1dc>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d111      	bne.n	8000f44 <HAL_I2C_Init+0x168>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	1e58      	subs	r0, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6859      	ldr	r1, [r3, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	440b      	add	r3, r1
 8000f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	e012      	b.n	8000f6a <HAL_I2C_Init+0x18e>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1e58      	subs	r0, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6859      	ldr	r1, [r3, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	0099      	lsls	r1, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bf0c      	ite	eq
 8000f64:	2301      	moveq	r3, #1
 8000f66:	2300      	movne	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_I2C_Init+0x196>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e022      	b.n	8000fb8 <HAL_I2C_Init+0x1dc>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10e      	bne.n	8000f98 <HAL_I2C_Init+0x1bc>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1e58      	subs	r0, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6859      	ldr	r1, [r3, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	440b      	add	r3, r1
 8000f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f96:	e00f      	b.n	8000fb8 <HAL_I2C_Init+0x1dc>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1e58      	subs	r0, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	0099      	lsls	r1, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	6809      	ldr	r1, [r1, #0]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69da      	ldr	r2, [r3, #28]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6911      	ldr	r1, [r2, #16]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68d2      	ldr	r2, [r2, #12]
 8000ff2:	4311      	orrs	r1, r2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2220      	movs	r2, #32
 8001032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	000186a0 	.word	0x000186a0
 8001054:	001e847f 	.word	0x001e847f
 8001058:	003d08ff 	.word	0x003d08ff
 800105c:	431bde83 	.word	0x431bde83
 8001060:	10624dd3 	.word	0x10624dd3

08001064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	461a      	mov	r2, r3
 8001070:	460b      	mov	r3, r1
 8001072:	817b      	strh	r3, [r7, #10]
 8001074:	4613      	mov	r3, r2
 8001076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff fbd8 	bl	800082c <HAL_GetTick>
 800107c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b20      	cmp	r3, #32
 8001088:	f040 80e0 	bne.w	800124c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2319      	movs	r3, #25
 8001092:	2201      	movs	r2, #1
 8001094:	4970      	ldr	r1, [pc, #448]	; (8001258 <HAL_I2C_Master_Transmit+0x1f4>)
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 fc92 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010a2:	2302      	movs	r3, #2
 80010a4:	e0d3      	b.n	800124e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_I2C_Master_Transmit+0x50>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e0cc      	b.n	800124e <HAL_I2C_Master_Transmit+0x1ea>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d007      	beq.n	80010da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2221      	movs	r2, #33	; 0x21
 80010ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2210      	movs	r2, #16
 80010f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	893a      	ldrh	r2, [r7, #8]
 800110a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <HAL_I2C_Master_Transmit+0x1f8>)
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800111c:	8979      	ldrh	r1, [r7, #10]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	6a3a      	ldr	r2, [r7, #32]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 fafc 	bl	8001720 <I2C_MasterRequestWrite>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e08d      	b.n	800124e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001148:	e066      	b.n	8001218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	6a39      	ldr	r1, [r7, #32]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 fd0c 	bl	8001b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00d      	beq.n	8001176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2b04      	cmp	r3, #4
 8001160:	d107      	bne.n	8001172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06b      	b.n	800124e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d11b      	bne.n	80011ec <HAL_I2C_Master_Transmit+0x188>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d017      	beq.n	80011ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3b01      	subs	r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	6a39      	ldr	r1, [r7, #32]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 fcfc 	bl	8001bee <I2C_WaitOnBTFFlagUntilTimeout>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00d      	beq.n	8001218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2b04      	cmp	r3, #4
 8001202:	d107      	bne.n	8001214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e01a      	b.n	800124e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121c:	2b00      	cmp	r3, #0
 800121e:	d194      	bne.n	800114a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800122e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2220      	movs	r2, #32
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	e000      	b.n	800124e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800124c:	2302      	movs	r3, #2
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	00100002 	.word	0x00100002
 800125c:	ffff0000 	.word	0xffff0000

08001260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af02      	add	r7, sp, #8
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	461a      	mov	r2, r3
 800126c:	460b      	mov	r3, r1
 800126e:	817b      	strh	r3, [r7, #10]
 8001270:	4613      	mov	r3, r2
 8001272:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff fad8 	bl	800082c <HAL_GetTick>
 800127c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b20      	cmp	r3, #32
 8001288:	f040 823f 	bne.w	800170a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2319      	movs	r3, #25
 8001292:	2201      	movs	r2, #1
 8001294:	497f      	ldr	r1, [pc, #508]	; (8001494 <HAL_I2C_Master_Receive+0x234>)
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 fb92 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80012a2:	2302      	movs	r3, #2
 80012a4:	e232      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_I2C_Master_Receive+0x54>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e22b      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d007      	beq.n	80012da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0201 	orr.w	r2, r2, #1
 80012d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2222      	movs	r2, #34	; 0x22
 80012ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2210      	movs	r2, #16
 80012f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	893a      	ldrh	r2, [r7, #8]
 800130a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <HAL_I2C_Master_Receive+0x238>)
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800131c:	8979      	ldrh	r1, [r7, #10]
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 fa7e 	bl	8001824 <I2C_MasterRequestRead>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1ec      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001336:	2b00      	cmp	r3, #0
 8001338:	d113      	bne.n	8001362 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e1c0      	b.n	80016e4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001366:	2b01      	cmp	r3, #1
 8001368:	d11e      	bne.n	80013a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800137a:	b672      	cpsid	i
}
 800137c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013a4:	b662      	cpsie	i
}
 80013a6:	e035      	b.n	8001414 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d11e      	bne.n	80013ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013ea:	b662      	cpsie	i
}
 80013ec:	e012      	b.n	8001414 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001414:	e166      	b.n	80016e4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141a:	2b03      	cmp	r3, #3
 800141c:	f200 811f 	bhi.w	800165e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001424:	2b01      	cmp	r3, #1
 8001426:	d123      	bne.n	8001470 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 fc1f 	bl	8001c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e167      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001458:	3b01      	subs	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800146e:	e139      	b.n	80016e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001474:	2b02      	cmp	r3, #2
 8001476:	d152      	bne.n	800151e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147e:	2200      	movs	r2, #0
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <HAL_I2C_Master_Receive+0x23c>)
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 fa9c 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e13c      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
 8001492:	bf00      	nop
 8001494:	00100002 	.word	0x00100002
 8001498:	ffff0000 	.word	0xffff0000
 800149c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014a0:	b672      	cpsid	i
}
 80014a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80014e6:	b662      	cpsie	i
}
 80014e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800151c:	e0e2      	b.n	80016e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	2200      	movs	r2, #0
 8001526:	497b      	ldr	r1, [pc, #492]	; (8001714 <HAL_I2C_Master_Receive+0x4b4>)
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 fa49 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0e9      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001574:	b29b      	uxth	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800157e:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_I2C_Master_Receive+0x4b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	4a65      	ldr	r2, [pc, #404]	; (800171c <HAL_I2C_Master_Receive+0x4bc>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0a1a      	lsrs	r2, r3, #8
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00da      	lsls	r2, r3, #3
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	3b01      	subs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d118      	bne.n	80015d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f043 0220 	orr.w	r2, r3, #32
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015c6:	b662      	cpsie	i
}
 80015c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e09a      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d1d9      	bne.n	8001598 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29b      	uxth	r3, r3
 800161e:	3b01      	subs	r3, #1
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001626:	b662      	cpsie	i
}
 8001628:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001652:	b29b      	uxth	r3, r3
 8001654:	3b01      	subs	r3, #1
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800165c:	e042      	b.n	80016e4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fb04 	bl	8001c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e04c      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	3b01      	subs	r3, #1
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d118      	bne.n	80016e4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f47f ae94 	bne.w	8001416 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800170a:	2302      	movs	r3, #2
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	00010004 	.word	0x00010004
 8001718:	20000000 	.word	0x20000000
 800171c:	14f8b589 	.word	0x14f8b589

08001720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	460b      	mov	r3, r1
 800172e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d006      	beq.n	800174a <I2C_MasterRequestWrite+0x2a>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d003      	beq.n	800174a <I2C_MasterRequestWrite+0x2a>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001748:	d108      	bne.n	800175c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e00b      	b.n	8001774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	2b12      	cmp	r3, #18
 8001762:	d107      	bne.n	8001774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f91d 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179a:	d103      	bne.n	80017a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e035      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b0:	d108      	bne.n	80017c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017b2:	897b      	ldrh	r3, [r7, #10]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	e01b      	b.n	80017fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017c4:	897b      	ldrh	r3, [r7, #10]
 80017c6:	11db      	asrs	r3, r3, #7
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0306 	and.w	r3, r3, #6
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f063 030f 	orn	r3, r3, #15
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <I2C_MasterRequestWrite+0xfc>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f943 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e010      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <I2C_MasterRequestWrite+0x100>)
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f933 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	00010008 	.word	0x00010008
 8001820:	00010002 	.word	0x00010002

08001824 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	460b      	mov	r3, r1
 8001832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001848:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d006      	beq.n	800185e <I2C_MasterRequestRead+0x3a>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d003      	beq.n	800185e <I2C_MasterRequestRead+0x3a>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800185c:	d108      	bne.n	8001870 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00b      	b.n	8001888 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	2b11      	cmp	r3, #17
 8001876:	d107      	bne.n	8001888 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001886:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f893 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ae:	d103      	bne.n	80018b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e079      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018c4:	d108      	bne.n	80018d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	e05f      	b.n	8001998 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	11db      	asrs	r3, r3, #7
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0306 	and.w	r3, r3, #6
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f063 030f 	orn	r3, r3, #15
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4930      	ldr	r1, [pc, #192]	; (80019b8 <I2C_MasterRequestRead+0x194>)
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f8b9 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e054      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4929      	ldr	r1, [pc, #164]	; (80019bc <I2C_MasterRequestRead+0x198>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f8a9 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e044      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f831 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00d      	beq.n	8001980 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001972:	d103      	bne.n	800197c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e017      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001980:	897b      	ldrh	r3, [r7, #10]
 8001982:	11db      	asrs	r3, r3, #7
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f003 0306 	and.w	r3, r3, #6
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f063 030e 	orn	r3, r3, #14
 8001990:	b2da      	uxtb	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <I2C_MasterRequestRead+0x198>)
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f865 	bl	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	00010008 	.word	0x00010008
 80019bc:	00010002 	.word	0x00010002

080019c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d0:	e025      	b.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d021      	beq.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7fe ff27 	bl	800082c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d116      	bne.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e023      	b.n	8001a66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10d      	bne.n	8001a44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4013      	ands	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	e00c      	b.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d0b6      	beq.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a7c:	e051      	b.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8c:	d123      	bne.n	8001ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f043 0204 	orr.w	r2, r3, #4
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e046      	b.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d021      	beq.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ade:	f7fe fea5 	bl	800082c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d302      	bcc.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d116      	bne.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f043 0220 	orr.w	r2, r3, #32
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e020      	b.n	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10c      	bne.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4013      	ands	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e00b      	b.n	8001b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d18d      	bne.n	8001a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b78:	e02d      	b.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f8ce 	bl	8001d1c <I2C_IsAcknowledgeFailed>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e02d      	b.n	8001be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d021      	beq.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7fe fe4b 	bl	800082c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d302      	bcc.n	8001ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d116      	bne.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f043 0220 	orr.w	r2, r3, #32
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e007      	b.n	8001be6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d1ca      	bne.n	8001b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bfa:	e02d      	b.n	8001c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f88d 	bl	8001d1c <I2C_IsAcknowledgeFailed>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e02d      	b.n	8001c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d021      	beq.n	8001c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7fe fe0a 	bl	800082c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d116      	bne.n	8001c58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e007      	b.n	8001c68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d1ca      	bne.n	8001bfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c7c:	e042      	b.n	8001d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d119      	bne.n	8001cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0210 	mvn.w	r2, #16
 8001c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e029      	b.n	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc0:	f7fe fdb4 	bl	800082c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d302      	bcc.n	8001cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e007      	b.n	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d1b5      	bne.n	8001c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d32:	d11b      	bne.n	8001d6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b08b      	sub	sp, #44	; 0x2c
 8001d7c:	af06      	add	r7, sp, #24
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0fd      	b.n	8001f86 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f006 fdc2 	bl	8008928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 f987 	bl	80040c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	687e      	ldr	r6, [r7, #4]
 8001dbe:	466d      	mov	r5, sp
 8001dc0:	f106 0410 	add.w	r4, r6, #16
 8001dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	602b      	str	r3, [r5, #0]
 8001dcc:	1d33      	adds	r3, r6, #4
 8001dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd0:	6838      	ldr	r0, [r7, #0]
 8001dd2:	f002 f951 	bl	8004078 <USB_CoreInit>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0ce      	b.n	8001f86 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f002 f982 	bl	80040f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e04c      	b.n	8001e94 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	b298      	uxth	r0, r3
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	3336      	adds	r3, #54	; 0x36
 8001e38:	4602      	mov	r2, r0
 8001e3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3338      	adds	r3, #56	; 0x38
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	333c      	adds	r3, #60	; 0x3c
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3340      	adds	r3, #64	; 0x40
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	3301      	adds	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d3ad      	bcc.n	8001dfa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e044      	b.n	8001f2e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d3b5      	bcc.n	8001ea4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	687e      	ldr	r6, [r7, #4]
 8001f40:	466d      	mov	r5, sp
 8001f42:	f106 0410 	add.w	r4, r6, #16
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	602b      	str	r3, [r5, #0]
 8001f4e:	1d33      	adds	r3, r6, #4
 8001f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f002 f8dc 	bl	8004110 <USB_DevInit>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00d      	b.n	8001f86 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fd8e 	bl	8006aa0 <USB_DevDisconnect>

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_PCD_Start+0x16>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e016      	b.n	8001fd2 <HAL_PCD_Start+0x44>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 f871 	bl	8004098 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f006 ff28 	bl	8008e0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fd62 	bl	8006a8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fd64 	bl	8006ab4 <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff6:	d102      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fb5f 	bl	80026bc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fd56 	bl	8006ab4 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	d112      	bne.n	800203a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002026:	b292      	uxth	r2, r2
 8002028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f006 fcf6 	bl	8008a1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002032:	2100      	movs	r1, #0
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f923 	bl	8002280 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fd38 	bl	8006ab4 <USB_ReadInterrupts>
 8002044:	4603      	mov	r3, r0
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800204e:	d10b      	bne.n	8002068 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f004 fd21 	bl	8006ab4 <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800207c:	d10b      	bne.n	8002096 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002086:	b29a      	uxth	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002090:	b292      	uxth	r2, r2
 8002092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fd0a 	bl	8006ab4 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020aa:	d126      	bne.n	80020fa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0204 	bic.w	r2, r2, #4
 80020be:	b292      	uxth	r2, r2
 80020c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0208 	bic.w	r2, r2, #8
 80020d6:	b292      	uxth	r2, r2
 80020d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f006 fcd7 	bl	8008a90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020f4:	b292      	uxth	r2, r2
 80020f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fcd8 	bl	8006ab4 <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800210e:	f040 8082 	bne.w	8002216 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	77fb      	strb	r3, [r7, #31]
 8002116:	e010      	b.n	800213a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	441a      	add	r2, r3
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	8812      	ldrh	r2, [r2, #0]
 8002128:	b292      	uxth	r2, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	3320      	adds	r3, #32
 800212e:	443b      	add	r3, r7
 8002130:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002134:	7ffb      	ldrb	r3, [r7, #31]
 8002136:	3301      	adds	r3, #1
 8002138:	77fb      	strb	r3, [r7, #31]
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	2b07      	cmp	r3, #7
 800213e:	d9eb      	bls.n	8002118 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	b292      	uxth	r2, r2
 8002154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	b292      	uxth	r2, r2
 800216c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002170:	bf00      	nop
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800217a:	b29b      	uxth	r3, r3
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f6      	beq.n	8002172 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002196:	b292      	uxth	r2, r2
 8002198:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800219c:	2300      	movs	r3, #0
 800219e:	77fb      	strb	r3, [r7, #31]
 80021a0:	e00f      	b.n	80021c2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80021a2:	7ffb      	ldrb	r3, [r7, #31]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4611      	mov	r1, r2
 80021aa:	7ffa      	ldrb	r2, [r7, #31]
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	440a      	add	r2, r1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	3320      	adds	r3, #32
 80021b4:	443b      	add	r3, r7
 80021b6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80021ba:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80021bc:	7ffb      	ldrb	r3, [r7, #31]
 80021be:	3301      	adds	r3, #1
 80021c0:	77fb      	strb	r3, [r7, #31]
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	2b07      	cmp	r3, #7
 80021c6:	d9ec      	bls.n	80021a2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0208 	orr.w	r2, r2, #8
 80021da:	b292      	uxth	r2, r2
 80021dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	b292      	uxth	r2, r2
 80021f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0204 	orr.w	r2, r2, #4
 800220a:	b292      	uxth	r2, r2
 800220c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f006 fc23 	bl	8008a5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fc4a 	bl	8006ab4 <USB_ReadInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222a:	d10e      	bne.n	800224a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002234:	b29a      	uxth	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800223e:	b292      	uxth	r2, r2
 8002240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f006 fbdc 	bl	8008a02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fc30 	bl	8006ab4 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225e:	d10b      	bne.n	8002278 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002268:	b29a      	uxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002272:	b292      	uxth	r2, r2
 8002274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002278:	bf00      	nop
 800227a:	3720      	adds	r7, #32
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_PCD_SetAddress+0x1a>
 8002296:	2302      	movs	r3, #2
 8002298:	e013      	b.n	80022c2 <HAL_PCD_SetAddress+0x42>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fbd7 	bl	8006a66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	4608      	mov	r0, r1
 80022d4:	4611      	mov	r1, r2
 80022d6:	461a      	mov	r2, r3
 80022d8:	4603      	mov	r3, r0
 80022da:	70fb      	strb	r3, [r7, #3]
 80022dc:	460b      	mov	r3, r1
 80022de:	803b      	strh	r3, [r7, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da0e      	bge.n	800230e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	705a      	strb	r2, [r3, #1]
 800230c:	e00e      	b.n	800232c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 0207 	and.w	r2, r3, #7
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002338:	883a      	ldrh	r2, [r7, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	78ba      	ldrb	r2, [r7, #2]
 8002342:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002356:	78bb      	ldrb	r3, [r7, #2]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d102      	bne.n	8002362 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_PCD_EP_Open+0xa6>
 800236c:	2302      	movs	r3, #2
 800236e:	e00e      	b.n	800238e <HAL_PCD_EP_Open+0xc4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fee6 	bl	8004150 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800238c:	7afb      	ldrb	r3, [r7, #11]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	da0e      	bge.n	80023c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	705a      	strb	r2, [r3, #1]
 80023c6:	e00e      	b.n	80023e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 0207 	and.w	r2, r3, #7
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_EP_Close+0x6a>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e00e      	b.n	800241e <HAL_PCD_EP_Close+0x88>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 fa08 	bl	8004824 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	460b      	mov	r3, r1
 8002434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	f003 0207 	and.w	r2, r3, #7
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2200      	movs	r2, #0
 8002464:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	b2da      	uxtb	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6979      	ldr	r1, [r7, #20]
 8002482:	4618      	mov	r0, r3
 8002484:	f002 fbba 	bl	8004bfc <USB_EPStartXfer>
 8002488:	e005      	b.n	8002496 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6979      	ldr	r1, [r7, #20]
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fbb3 	bl	8004bfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 0207 	and.w	r2, r3, #7
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	460b      	mov	r3, r1
 80024dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2200      	movs	r2, #0
 8002512:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2201      	movs	r2, #1
 8002518:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251a:	7afb      	ldrb	r3, [r7, #11]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	b2da      	uxtb	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6979      	ldr	r1, [r7, #20]
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fb60 	bl	8004bfc <USB_EPStartXfer>
 800253c:	e005      	b.n	800254a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fb59 	bl	8004bfc <USB_EPStartXfer>
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	f003 0207 	and.w	r2, r3, #7
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	d901      	bls.n	8002572 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e04c      	b.n	800260c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002576:	2b00      	cmp	r3, #0
 8002578:	da0e      	bge.n	8002598 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	705a      	strb	r2, [r3, #1]
 8002596:	e00c      	b.n	80025b2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_PCD_EP_SetStall+0x7e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e01c      	b.n	800260c <HAL_PCD_EP_SetStall+0xb8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 f943 	bl	800686c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d108      	bne.n	8002602 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f004 fa68 	bl	8006ad2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 020f 	and.w	r2, r3, #15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d901      	bls.n	8002632 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e040      	b.n	80026b4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da0e      	bge.n	8002658 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	705a      	strb	r2, [r3, #1]
 8002656:	e00e      	b.n	8002676 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_PCD_EP_ClrStall+0x82>
 8002692:	2302      	movs	r3, #2
 8002694:	e00e      	b.n	80026b4 <HAL_PCD_EP_ClrStall+0xa0>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 f931 	bl	800690c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026c4:	e2ec      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80026d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80026dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 8161 	bne.w	80029a8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d152      	bne.n	8002796 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002700:	81fb      	strh	r3, [r7, #14]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002710:	b29b      	uxth	r3, r3
 8002712:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3328      	adds	r3, #40	; 0x28
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	3302      	adds	r3, #2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	441a      	add	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002754:	2100      	movs	r1, #0
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f006 f939 	bl	80089ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 829b 	beq.w	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 8296 	bne.w	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002780:	b2da      	uxtb	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b292      	uxth	r2, r2
 8002788:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002794:	e284      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d034      	beq.n	800281a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	3306      	adds	r3, #6
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f004 f9bf 	bl	8006b72 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002800:	4013      	ands	r3, r2
 8002802:	823b      	strh	r3, [r7, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	8a3a      	ldrh	r2, [r7, #16]
 800280a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800280e:	b292      	uxth	r2, r2
 8002810:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f006 f8ae 	bl	8008974 <HAL_PCD_SetupStageCallback>
 8002818:	e242      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800281a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800281e:	2b00      	cmp	r3, #0
 8002820:	f280 823e 	bge.w	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29a      	uxth	r2, r3
 800282c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002830:	4013      	ands	r3, r2
 8002832:	83bb      	strh	r3, [r7, #28]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	8bba      	ldrh	r2, [r7, #28]
 800283a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800283e:	b292      	uxth	r2, r2
 8002840:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	3306      	adds	r3, #6
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <PCD_EP_ISR_Handler+0x1ee>
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	6959      	ldr	r1, [r3, #20]
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800288e:	b29b      	uxth	r3, r3
 8002890:	f004 f96f 	bl	8006b72 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	441a      	add	r2, r3
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028a2:	2100      	movs	r1, #0
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f006 f877 	bl	8008998 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 81f2 	bne.w	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d112      	bne.n	800290a <PCD_EP_ISR_Handler+0x24e>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002902:	b29a      	uxth	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	e02f      	b.n	800296a <PCD_EP_ISR_Handler+0x2ae>
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b3e      	cmp	r3, #62	; 0x3e
 8002910:	d813      	bhi.n	800293a <PCD_EP_ISR_Handler+0x27e>
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <PCD_EP_ISR_Handler+0x270>
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	3301      	adds	r3, #1
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	b29b      	uxth	r3, r3
 8002930:	029b      	lsls	r3, r3, #10
 8002932:	b29a      	uxth	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	e017      	b.n	800296a <PCD_EP_ISR_Handler+0x2ae>
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	633b      	str	r3, [r7, #48]	; 0x30
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <PCD_EP_ISR_Handler+0x298>
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	3b01      	subs	r3, #1
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	b29b      	uxth	r3, r3
 8002958:	029b      	lsls	r3, r3, #10
 800295a:	b29b      	uxth	r3, r3
 800295c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002964:	b29a      	uxth	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	827b      	strh	r3, [r7, #18]
 800297c:	8a7b      	ldrh	r3, [r7, #18]
 800297e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002982:	827b      	strh	r3, [r7, #18]
 8002984:	8a7b      	ldrh	r3, [r7, #18]
 8002986:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800298a:	827b      	strh	r3, [r7, #18]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	8a7b      	ldrh	r3, [r7, #18]
 8002992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800299a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	8013      	strh	r3, [r2, #0]
 80029a6:	e17b      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029ba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f280 80ea 	bge.w	8002b98 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029da:	4013      	ands	r3, r2
 80029dc:	853b      	strh	r3, [r7, #40]	; 0x28
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f2:	b292      	uxth	r2, r2
 80029f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	7b1b      	ldrb	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d122      	bne.n	8002a5a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	3306      	adds	r3, #6
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002a3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8087 	beq.w	8002b54 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	6959      	ldr	r1, [r3, #20]
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	88da      	ldrh	r2, [r3, #6]
 8002a52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a54:	f004 f88d 	bl	8006b72 <USB_ReadPMA>
 8002a58:	e07c      	b.n	8002b54 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	78db      	ldrb	r3, [r3, #3]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d108      	bne.n	8002a74 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a64:	461a      	mov	r2, r3
 8002a66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f927 	bl	8002cbc <HAL_PCD_EP_DB_Receive>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002a72:	e06f      	b.n	8002b54 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	441a      	add	r2, r3
 8002a9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d021      	beq.n	8002b12 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002af8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d02a      	beq.n	8002b54 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	6959      	ldr	r1, [r3, #20]
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	891a      	ldrh	r2, [r3, #8]
 8002b0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b0c:	f004 f831 	bl	8006b72 <USB_ReadPMA>
 8002b10:	e020      	b.n	8002b54 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	3306      	adds	r3, #6
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b3a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	6959      	ldr	r1, [r3, #20]
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	895a      	ldrh	r2, [r3, #10]
 8002b4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b50:	f004 f80f 	bl	8006b72 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b5a:	441a      	add	r2, r3
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b66:	441a      	add	r2, r3
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <PCD_EP_ISR_Handler+0x4c2>
 8002b74:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d206      	bcs.n	8002b8c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f005 ff07 	bl	8008998 <HAL_PCD_DataOutStageCallback>
 8002b8a:	e005      	b.n	8002b98 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b92:	4618      	mov	r0, r3
 8002b94:	f002 f832 	bl	8004bfc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d07e      	beq.n	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ba2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd0:	843b      	strh	r3, [r7, #32]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	8c3b      	ldrh	r3, [r7, #32]
 8002be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	78db      	ldrb	r3, [r3, #3]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d00c      	beq.n	8002c10 <PCD_EP_ISR_Handler+0x554>
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	78db      	ldrb	r3, [r3, #3]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d146      	bne.n	8002c94 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d141      	bne.n	8002c94 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	3302      	adds	r3, #2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c38:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	8bfb      	ldrh	r3, [r7, #30]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d906      	bls.n	8002c52 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	8bfb      	ldrh	r3, [r7, #30]
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	619a      	str	r2, [r3, #24]
 8002c50:	e002      	b.n	8002c58 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f005 feb1 	bl	80089ce <HAL_PCD_DataInStageCallback>
 8002c6c:	e018      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	8bfb      	ldrh	r3, [r7, #30]
 8002c74:	441a      	add	r2, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	441a      	add	r2, r3
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 ffb5 	bl	8004bfc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002c92:	e005      	b.n	8002ca0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c96:	461a      	mov	r2, r3
 8002c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f91b 	bl	8002ed6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b21b      	sxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f6ff ad0a 	blt.w	80026c6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3738      	adds	r7, #56	; 0x38
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d07e      	beq.n	8002dd2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	8b7b      	ldrh	r3, [r7, #26]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d306      	bcc.n	8002d16 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	8b7b      	ldrh	r3, [r7, #26]
 8002d0e:	1ad2      	subs	r2, r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	619a      	str	r2, [r3, #24]
 8002d14:	e002      	b.n	8002d1c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d123      	bne.n	8002d6c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	833b      	strh	r3, [r7, #24]
 8002d40:	8b3b      	ldrh	r3, [r7, #24]
 8002d42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d46:	833b      	strh	r3, [r7, #24]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	8b3b      	ldrh	r3, [r7, #24]
 8002d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01f      	beq.n	8002db6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d90:	82fb      	strh	r3, [r7, #22]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	441a      	add	r2, r3
 8002da0:	8afb      	ldrh	r3, [r7, #22]
 8002da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002db6:	8b7b      	ldrh	r3, [r7, #26]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8087 	beq.w	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6959      	ldr	r1, [r3, #20]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	891a      	ldrh	r2, [r3, #8]
 8002dca:	8b7b      	ldrh	r3, [r7, #26]
 8002dcc:	f003 fed1 	bl	8006b72 <USB_ReadPMA>
 8002dd0:	e07c      	b.n	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	3306      	adds	r3, #6
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dfa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	699a      	ldr	r2, [r3, #24]
 8002e00:	8b7b      	ldrh	r3, [r7, #26]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d306      	bcc.n	8002e14 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	8b7b      	ldrh	r3, [r7, #26]
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	619a      	str	r2, [r3, #24]
 8002e12:	e002      	b.n	8002e1a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d123      	bne.n	8002e6a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	83fb      	strh	r3, [r7, #30]
 8002e3e:	8bfb      	ldrh	r3, [r7, #30]
 8002e40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e44:	83fb      	strh	r3, [r7, #30]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	441a      	add	r2, r3
 8002e54:	8bfb      	ldrh	r3, [r7, #30]
 8002e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11f      	bne.n	8002eb4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	83bb      	strh	r3, [r7, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	8bbb      	ldrh	r3, [r7, #28]
 8002ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002eb4:	8b7b      	ldrh	r3, [r7, #26]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6959      	ldr	r1, [r3, #20]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	895a      	ldrh	r2, [r3, #10]
 8002ec6:	8b7b      	ldrh	r3, [r7, #26]
 8002ec8:	f003 fe53 	bl	8006b72 <USB_ReadPMA>
    }
  }

  return count;
 8002ecc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b0a2      	sub	sp, #136	; 0x88
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 81c7 	beq.w	800327e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	3302      	adds	r3, #2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d907      	bls.n	8002f38 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f30:	1ad2      	subs	r2, r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	619a      	str	r2, [r3, #24]
 8002f36:	e002      	b.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 80b9 	bne.w	80030ba <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d126      	bne.n	8002f9e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	4413      	add	r3, r2
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	011a      	lsls	r2, r3, #4
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e01a      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d116      	bne.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	4413      	add	r3, r2
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	011a      	lsls	r2, r3, #4
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d126      	bne.n	8003030 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	011a      	lsls	r2, r3, #4
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003014:	b29a      	uxth	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003028:	b29a      	uxth	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	801a      	strh	r2, [r3, #0]
 800302e:	e017      	b.n	8003060 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d113      	bne.n	8003060 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	4413      	add	r3, r2
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	4413      	add	r3, r2
 8003054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2200      	movs	r2, #0
 800305e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f005 fcb1 	bl	80089ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 82d4 	beq.w	8003620 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	827b      	strh	r3, [r7, #18]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	441a      	add	r2, r3
 80030a2:	8a7b      	ldrh	r3, [r7, #18]
 80030a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	8013      	strh	r3, [r2, #0]
 80030b8:	e2b2      	b.n	8003620 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d021      	beq.n	8003108 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80030f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	b29b      	uxth	r3, r3
 8003106:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800310e:	2b01      	cmp	r3, #1
 8003110:	f040 8286 	bne.w	8003620 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800311c:	441a      	add	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800312a:	441a      	add	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d309      	bcc.n	8003150 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003148:	1ad2      	subs	r2, r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	621a      	str	r2, [r3, #32]
 800314e:	e015      	b.n	800317c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d107      	bne.n	8003168 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800315c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003166:	e009      	b.n	800317c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	785b      	ldrb	r3, [r3, #1]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d155      	bne.n	8003230 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	4413      	add	r3, r2
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	011a      	lsls	r2, r3, #4
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	4413      	add	r3, r2
 80031a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d112      	bne.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x302>
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031bc:	b29a      	uxth	r2, r3
 80031be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	e047      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x392>
 80031d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031da:	2b3e      	cmp	r3, #62	; 0x3e
 80031dc:	d811      	bhi.n	8003202 <HAL_PCD_EP_DB_Transmit+0x32c>
 80031de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x31e>
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	3301      	adds	r3, #1
 80031f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	029b      	lsls	r3, r3, #10
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	e032      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x392>
 8003202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	64bb      	str	r3, [r7, #72]	; 0x48
 8003208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_PCD_EP_DB_Transmit+0x342>
 8003212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003214:	3b01      	subs	r3, #1
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
 8003218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321a:	b29b      	uxth	r3, r3
 800321c:	029b      	lsls	r3, r3, #10
 800321e:	b29b      	uxth	r3, r3
 8003220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003228:	b29a      	uxth	r2, r3
 800322a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e01b      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x392>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d117      	bne.n	8003268 <HAL_PCD_EP_DB_Transmit+0x392>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	643b      	str	r3, [r7, #64]	; 0x40
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324c:	4413      	add	r3, r2
 800324e:	643b      	str	r3, [r7, #64]	; 0x40
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	011a      	lsls	r2, r3, #4
 8003256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003258:	4413      	add	r3, r2
 800325a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800325e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003262:	b29a      	uxth	r2, r3
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6959      	ldr	r1, [r3, #20]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	891a      	ldrh	r2, [r3, #8]
 8003274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	f003 fc36 	bl	8006ae8 <USB_WritePMA>
 800327c:	e1d0      	b.n	8003620 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	3306      	adds	r3, #6
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d307      	bcc.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	619a      	str	r2, [r3, #24]
 80032c4:	e002      	b.n	80032cc <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 80c4 	bne.w	800345e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d126      	bne.n	800332c <HAL_PCD_EP_DB_Transmit+0x456>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	4413      	add	r3, r2
 80032f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	011a      	lsls	r2, r3, #4
 80032fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fe:	4413      	add	r3, r2
 8003300:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003304:	66bb      	str	r3, [r7, #104]	; 0x68
 8003306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003310:	b29a      	uxth	r2, r3
 8003312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003324:	b29a      	uxth	r2, r3
 8003326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	e01a      	b.n	8003362 <HAL_PCD_EP_DB_Transmit+0x48c>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d116      	bne.n	8003362 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	677b      	str	r3, [r7, #116]	; 0x74
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003348:	4413      	add	r3, r2
 800334a:	677b      	str	r3, [r7, #116]	; 0x74
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	011a      	lsls	r2, r3, #4
 8003352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003354:	4413      	add	r3, r2
 8003356:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800335a:	673b      	str	r3, [r7, #112]	; 0x70
 800335c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800335e:	2200      	movs	r2, #0
 8003360:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	67bb      	str	r3, [r7, #120]	; 0x78
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d12f      	bne.n	80033d0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003388:	4413      	add	r3, r2
 800338a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	011a      	lsls	r2, r3, #4
 8003394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003398:	4413      	add	r3, r2
 800339a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800339e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	e017      	b.n	8003400 <HAL_PCD_EP_DB_Transmit+0x52a>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d113      	bne.n	8003400 <HAL_PCD_EP_DB_Transmit+0x52a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e6:	4413      	add	r3, r2
 80033e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	011a      	lsls	r2, r3, #4
 80033f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f2:	4413      	add	r3, r2
 80033f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033fc:	2200      	movs	r2, #0
 80033fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f005 fae1 	bl	80089ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8104 	bne.w	8003620 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	441a      	add	r2, r3
 8003444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	b29b      	uxth	r3, r3
 800345a:	8013      	strh	r3, [r2, #0]
 800345c:	e0e0      	b.n	8003620 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d121      	bne.n	80034ac <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	441a      	add	r2, r3
 8003494:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800349c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	f040 80b4 	bne.w	8003620 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034c0:	441a      	add	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034ce:	441a      	add	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d309      	bcc.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ec:	1ad2      	subs	r2, r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	621a      	str	r2, [r3, #32]
 80034f2:	e015      	b.n	8003520 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d107      	bne.n	800350c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80034fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003500:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800350a:	e009      	b.n	8003520 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	667b      	str	r3, [r7, #100]	; 0x64
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d155      	bne.n	80035da <HAL_PCD_EP_DB_Transmit+0x704>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800353c:	b29b      	uxth	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003542:	4413      	add	r3, r2
 8003544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	011a      	lsls	r2, r3, #4
 800354c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354e:	4413      	add	r3, r2
 8003550:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003554:	65bb      	str	r3, [r7, #88]	; 0x58
 8003556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003558:	2b00      	cmp	r3, #0
 800355a:	d112      	bne.n	8003582 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800355c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003566:	b29a      	uxth	r2, r3
 8003568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357a:	b29a      	uxth	r2, r3
 800357c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	e044      	b.n	800360c <HAL_PCD_EP_DB_Transmit+0x736>
 8003582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003584:	2b3e      	cmp	r3, #62	; 0x3e
 8003586:	d811      	bhi.n	80035ac <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	657b      	str	r3, [r7, #84]	; 0x54
 800358e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359a:	3301      	adds	r3, #1
 800359c:	657b      	str	r3, [r7, #84]	; 0x54
 800359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	029b      	lsls	r3, r3, #10
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a8:	801a      	strh	r2, [r3, #0]
 80035aa:	e02f      	b.n	800360c <HAL_PCD_EP_DB_Transmit+0x736>
 80035ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	657b      	str	r3, [r7, #84]	; 0x54
 80035b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	3b01      	subs	r3, #1
 80035c0:	657b      	str	r3, [r7, #84]	; 0x54
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	029b      	lsls	r3, r3, #10
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	e018      	b.n	800360c <HAL_PCD_EP_DB_Transmit+0x736>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d114      	bne.n	800360c <HAL_PCD_EP_DB_Transmit+0x736>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f0:	4413      	add	r3, r2
 80035f2:	667b      	str	r3, [r7, #100]	; 0x64
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	011a      	lsls	r2, r3, #4
 80035fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fc:	4413      	add	r3, r2
 80035fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003602:	663b      	str	r3, [r7, #96]	; 0x60
 8003604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003606:	b29a      	uxth	r2, r3
 8003608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800360a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6959      	ldr	r1, [r3, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	895a      	ldrh	r2, [r3, #10]
 8003618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	f003 fa64 	bl	8006ae8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363a:	823b      	strh	r3, [r7, #16]
 800363c:	8a3b      	ldrh	r3, [r7, #16]
 800363e:	f083 0310 	eor.w	r3, r3, #16
 8003642:	823b      	strh	r3, [r7, #16]
 8003644:	8a3b      	ldrh	r3, [r7, #16]
 8003646:	f083 0320 	eor.w	r3, r3, #32
 800364a:	823b      	strh	r3, [r7, #16]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	441a      	add	r2, r3
 800365a:	8a3b      	ldrh	r3, [r7, #16]
 800365c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366c:	b29b      	uxth	r3, r3
 800366e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3788      	adds	r7, #136	; 0x88
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800367a:	b480      	push	{r7}
 800367c:	b087      	sub	sp, #28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	817b      	strh	r3, [r7, #10]
 8003688:	4613      	mov	r3, r2
 800368a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800368c:	897b      	ldrh	r3, [r7, #10]
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003698:	897b      	ldrh	r3, [r7, #10]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e009      	b.n	80036c4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036b0:	897a      	ldrh	r2, [r7, #10]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4413      	add	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036c4:	893b      	ldrh	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	80da      	strh	r2, [r3, #6]
 80036d8:	e00b      	b.n	80036f2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2201      	movs	r2, #1
 80036de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0c1b      	lsrs	r3, r3, #16
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e272      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8087 	beq.w	800382e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003720:	4b92      	ldr	r3, [pc, #584]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b04      	cmp	r3, #4
 800372a:	d00c      	beq.n	8003746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800372c:	4b8f      	ldr	r3, [pc, #572]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d112      	bne.n	800375e <HAL_RCC_OscConfig+0x5e>
 8003738:	4b8c      	ldr	r3, [pc, #560]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d10b      	bne.n	800375e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003746:	4b89      	ldr	r3, [pc, #548]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d06c      	beq.n	800382c <HAL_RCC_OscConfig+0x12c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d168      	bne.n	800382c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e24c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x76>
 8003768:	4b80      	ldr	r3, [pc, #512]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7f      	ldr	r2, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e02e      	b.n	80037d4 <HAL_RCC_OscConfig+0xd4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x98>
 800377e:	4b7b      	ldr	r3, [pc, #492]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7a      	ldr	r2, [pc, #488]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b78      	ldr	r3, [pc, #480]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a77      	ldr	r2, [pc, #476]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01d      	b.n	80037d4 <HAL_RCC_OscConfig+0xd4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0xbc>
 80037a2:	4b72      	ldr	r3, [pc, #456]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a71      	ldr	r2, [pc, #452]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b6f      	ldr	r3, [pc, #444]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6e      	ldr	r2, [pc, #440]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0xd4>
 80037bc:	4b6b      	ldr	r3, [pc, #428]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd f826 	bl	800082c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fd f822 	bl	800082c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e200      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe4>
 8003802:	e014      	b.n	800382e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fd f812 	bl	800082c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fd f80e 	bl	800082c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e1ec      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x10c>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d063      	beq.n	8003902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800383a:	4b4c      	ldr	r3, [pc, #304]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003846:	4b49      	ldr	r3, [pc, #292]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b08      	cmp	r3, #8
 8003850:	d11c      	bne.n	800388c <HAL_RCC_OscConfig+0x18c>
 8003852:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d116      	bne.n	800388c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_RCC_OscConfig+0x176>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e1c0      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4939      	ldr	r1, [pc, #228]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	e03a      	b.n	8003902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7fc ffc7 	bl	800082c <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a2:	f7fc ffc3 	bl	800082c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1a1      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4927      	ldr	r1, [pc, #156]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]
 80038d4:	e015      	b.n	8003902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fc ffa6 	bl	800082c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e4:	f7fc ffa2 	bl	800082c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e180      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03a      	beq.n	8003984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d019      	beq.n	800394a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fc ff86 	bl	800082c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7fc ff82 	bl	800082c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e160      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003942:	2001      	movs	r0, #1
 8003944:	f000 fac4 	bl	8003ed0 <RCC_Delay>
 8003948:	e01c      	b.n	8003984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fc ff6c 	bl	800082c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003956:	e00f      	b.n	8003978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003958:	f7fc ff68 	bl	800082c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d908      	bls.n	8003978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e146      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	42420000 	.word	0x42420000
 8003974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e9      	bne.n	8003958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a6 	beq.w	8003ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	61d3      	str	r3, [r2, #28]
 80039ae:	4b85      	ldr	r3, [pc, #532]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b82      	ldr	r3, [pc, #520]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7e      	ldr	r2, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fc ff29 	bl	800082c <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fc ff25 	bl	800082c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b64      	cmp	r3, #100	; 0x64
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e103      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x312>
 8003a04:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	e02d      	b.n	8003a6e <HAL_RCC_OscConfig+0x36e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x334>
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a69      	ldr	r2, [pc, #420]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	6213      	str	r3, [r2, #32]
 8003a32:	e01c      	b.n	8003a6e <HAL_RCC_OscConfig+0x36e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_OscConfig+0x356>
 8003a3c:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a60      	ldr	r2, [pc, #384]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	6213      	str	r3, [r2, #32]
 8003a48:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4a5d      	ldr	r2, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	e00b      	b.n	8003a6e <HAL_RCC_OscConfig+0x36e>
 8003a56:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a5a      	ldr	r2, [pc, #360]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	4b58      	ldr	r3, [pc, #352]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4a57      	ldr	r2, [pc, #348]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d015      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fc fed9 	bl	800082c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fc fed5 	bl	800082c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0b1      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ee      	beq.n	8003a7e <HAL_RCC_OscConfig+0x37e>
 8003aa0:	e014      	b.n	8003acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa2:	f7fc fec3 	bl	800082c <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fc febf 	bl	800082c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e09b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac0:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ee      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b3c      	ldr	r3, [pc, #240]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4a3b      	ldr	r2, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8087 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d061      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d146      	bne.n	8003b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7fc fe93 	bl	800082c <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fc fe8f 	bl	800082c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e06d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d108      	bne.n	8003b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4921      	ldr	r1, [pc, #132]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a19      	ldr	r1, [r3, #32]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	430b      	orrs	r3, r1
 8003b56:	491b      	ldr	r1, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x4cc>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fc fe63 	bl	800082c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fc fe5f 	bl	800082c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e03d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x46a>
 8003b88:	e035      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fc fe4c 	bl	800082c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fc fe48 	bl	800082c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e026      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x498>
 8003bb6:	e01e      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e019      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_OscConfig+0x500>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000

08003c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0d0      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d910      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	4965      	ldr	r1, [pc, #404]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b63      	ldr	r3, [pc, #396]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0b8      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a58      	ldr	r2, [pc, #352]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c78:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	494d      	ldr	r1, [pc, #308]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d040      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d115      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07f      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e073      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e06b      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f023 0203 	bic.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4936      	ldr	r1, [pc, #216]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf4:	f7fc fd9a 	bl	800082c <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7fc fd96 	bl	800082c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e053      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 020c 	and.w	r2, r3, #12
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1eb      	bne.n	8003cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d210      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0207 	bic.w	r2, r3, #7
 8003d3a:	4922      	ldr	r1, [pc, #136]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e032      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4916      	ldr	r1, [pc, #88]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	490e      	ldr	r1, [pc, #56]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d92:	f000 f821 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	490a      	ldr	r1, [pc, #40]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	5ccb      	ldrb	r3, [r1, r3]
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fcf8 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08008f50 	.word	0x08008f50
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	20000004 	.word	0x20000004

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b490      	push	{r4, r7}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xac>)
 8003de0:	1d3c      	adds	r4, r7, #4
 8003de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003de8:	f240 2301 	movw	r3, #513	; 0x201
 8003dec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e02:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x40>
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x46>
 8003e16:	e02b      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e1a:	623b      	str	r3, [r7, #32]
      break;
 8003e1c:	e02b      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	0c9b      	lsrs	r3, r3, #18
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	3328      	adds	r3, #40	; 0x28
 8003e28:	443b      	add	r3, r7
 8003e2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d012      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0c5b      	lsrs	r3, r3, #17
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	3328      	adds	r3, #40	; 0x28
 8003e46:	443b      	add	r3, r7
 8003e48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e52:	fb03 f202 	mul.w	r2, r3, r2
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e004      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	623b      	str	r3, [r7, #32]
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e72:	623b      	str	r3, [r7, #32]
      break;
 8003e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc90      	pop	{r4, r7}
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	08008ef8 	.word	0x08008ef8
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	007a1200 	.word	0x007a1200
 8003e90:	003d0900 	.word	0x003d0900

08003e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b02      	ldr	r3, [pc, #8]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	20000000 	.word	0x20000000

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eac:	f7ff fff2 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08008f60 	.word	0x08008f60

08003ed0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <RCC_Delay+0x34>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <RCC_Delay+0x38>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0a5b      	lsrs	r3, r3, #9
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eec:	bf00      	nop
  }
  while (Delay --);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	60fa      	str	r2, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f9      	bne.n	8003eec <RCC_Delay+0x1c>
}
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	20000000 	.word	0x20000000
 8003f08:	10624dd3 	.word	0x10624dd3

08003f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d07d      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10d      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f38:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4a4b      	ldr	r2, [pc, #300]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f42:	61d3      	str	r3, [r2, #28]
 8003f44:	4b49      	ldr	r3, [pc, #292]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f54:	4b46      	ldr	r3, [pc, #280]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d118      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f60:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a42      	ldr	r2, [pc, #264]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6c:	f7fc fc5e 	bl	800082c <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	e008      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f74:	f7fc fc5a 	bl	800082c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e06d      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	4b3a      	ldr	r3, [pc, #232]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f92:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d02e      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d027      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fba:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc0:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fc6:	4a29      	ldr	r2, [pc, #164]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d014      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fc fc29 	bl	800082c <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fc fc25 	bl	800082c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e036      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ee      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4917      	ldr	r1, [pc, #92]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	4313      	orrs	r3, r2
 8004010:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004022:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004030:	4b0e      	ldr	r3, [pc, #56]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	490b      	ldr	r1, [pc, #44]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4904      	ldr	r1, [pc, #16]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	40007000 	.word	0x40007000
 8004074:	42420440 	.word	0x42420440

08004078 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004078:	b084      	sub	sp, #16
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	f107 0014 	add.w	r0, r7, #20
 8004086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	b004      	add	sp, #16
 8004096:	4770      	bx	lr

08004098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	4013      	ands	r3, r2
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004110:	b084      	sub	sp, #16
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	f107 0014 	add.w	r0, r7, #20
 800411e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	b004      	add	sp, #16
 800414e:	4770      	bx	lr

08004150 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004150:	b480      	push	{r7}
 8004152:	b09b      	sub	sp, #108	; 0x6c
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	78db      	ldrb	r3, [r3, #3]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d81f      	bhi.n	80041c2 <USB_ActivateEndpoint+0x72>
 8004182:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <USB_ActivateEndpoint+0x38>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	08004199 	.word	0x08004199
 800418c:	080041b5 	.word	0x080041b5
 8004190:	080041cb 	.word	0x080041cb
 8004194:	080041a7 	.word	0x080041a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004198:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800419c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041a4:	e012      	b.n	80041cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80041ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041b2:	e00b      	b.n	80041cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041c0:	e004      	b.n	80041cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041c8:	e000      	b.n	80041cc <USB_ActivateEndpoint+0x7c>
      break;
 80041ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	441a      	add	r2, r3
 80041d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	b29a      	uxth	r2, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b29b      	uxth	r3, r3
 800420c:	4313      	orrs	r3, r2
 800420e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004230:	b29b      	uxth	r3, r3
 8004232:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	7b1b      	ldrb	r3, [r3, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 8149 	bne.w	80044d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8084 	beq.w	8004350 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004252:	b29b      	uxth	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	4413      	add	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	88db      	ldrh	r3, [r3, #6]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	b29b      	uxth	r3, r3
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	81fb      	strh	r3, [r7, #14]
 800428a:	89fb      	ldrh	r3, [r7, #14]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01b      	beq.n	80042cc <USB_ActivateEndpoint+0x17c>
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	81bb      	strh	r3, [r7, #12]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	89bb      	ldrh	r3, [r7, #12]
 80042b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	78db      	ldrb	r3, [r3, #3]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d020      	beq.n	8004316 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ea:	813b      	strh	r3, [r7, #8]
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	f083 0320 	eor.w	r3, r3, #32
 80042f2:	813b      	strh	r3, [r7, #8]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	893b      	ldrh	r3, [r7, #8]
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]
 8004314:	e27f      	b.n	8004816 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432c:	817b      	strh	r3, [r7, #10]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	441a      	add	r2, r3
 8004338:	897b      	ldrh	r3, [r7, #10]
 800433a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434a:	b29b      	uxth	r3, r3
 800434c:	8013      	strh	r3, [r2, #0]
 800434e:	e262      	b.n	8004816 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	4413      	add	r3, r2
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	011a      	lsls	r2, r3, #4
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	4413      	add	r3, r2
 800436e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	88db      	ldrh	r3, [r3, #6]
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	b29b      	uxth	r3, r3
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	4413      	add	r3, r2
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	011a      	lsls	r2, r3, #4
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	4413      	add	r3, r2
 80043a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d112      	bne.n	80043d6 <USB_ActivateEndpoint+0x286>
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	801a      	strh	r2, [r3, #0]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	e02f      	b.n	8004436 <USB_ActivateEndpoint+0x2e6>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b3e      	cmp	r3, #62	; 0x3e
 80043dc:	d813      	bhi.n	8004406 <USB_ActivateEndpoint+0x2b6>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	663b      	str	r3, [r7, #96]	; 0x60
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <USB_ActivateEndpoint+0x2a8>
 80043f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f4:	3301      	adds	r3, #1
 80043f6:	663b      	str	r3, [r7, #96]	; 0x60
 80043f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	029b      	lsls	r3, r3, #10
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	e017      	b.n	8004436 <USB_ActivateEndpoint+0x2e6>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	663b      	str	r3, [r7, #96]	; 0x60
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <USB_ActivateEndpoint+0x2d0>
 800441a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441c:	3b01      	subs	r3, #1
 800441e:	663b      	str	r3, [r7, #96]	; 0x60
 8004420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004422:	b29b      	uxth	r3, r3
 8004424:	029b      	lsls	r3, r3, #10
 8004426:	b29b      	uxth	r3, r3
 8004428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800442c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004430:	b29a      	uxth	r2, r3
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	83fb      	strh	r3, [r7, #30]
 8004444:	8bfb      	ldrh	r3, [r7, #30]
 8004446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01b      	beq.n	8004486 <USB_ActivateEndpoint+0x336>
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004464:	83bb      	strh	r3, [r7, #28]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	441a      	add	r2, r3
 8004470:	8bbb      	ldrh	r3, [r7, #28]
 8004472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449c:	837b      	strh	r3, [r7, #26]
 800449e:	8b7b      	ldrh	r3, [r7, #26]
 80044a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044a4:	837b      	strh	r3, [r7, #26]
 80044a6:	8b7b      	ldrh	r3, [r7, #26]
 80044a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044ac:	837b      	strh	r3, [r7, #26]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	8b7b      	ldrh	r3, [r7, #26]
 80044ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
 80044ce:	e1a2      	b.n	8004816 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004500:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	b29b      	uxth	r3, r3
 800450a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800451c:	4413      	add	r3, r2
 800451e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	011a      	lsls	r2, r3, #4
 8004526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004528:	4413      	add	r3, r2
 800452a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800452e:	657b      	str	r3, [r7, #84]	; 0x54
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	891b      	ldrh	r3, [r3, #8]
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	653b      	str	r3, [r7, #80]	; 0x50
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004550:	4413      	add	r3, r2
 8004552:	653b      	str	r3, [r7, #80]	; 0x50
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	011a      	lsls	r2, r3, #4
 800455a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455c:	4413      	add	r3, r2
 800455e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	895b      	ldrh	r3, [r3, #10]
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	b29b      	uxth	r3, r3
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004572:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f040 8091 	bne.w	80046a0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800458c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800458e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01b      	beq.n	80045ce <USB_ActivateEndpoint+0x47e>
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	873b      	strh	r3, [r7, #56]	; 0x38
 80045dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01b      	beq.n	800461e <USB_ActivateEndpoint+0x4ce>
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	441a      	add	r2, r3
 8004608:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800460a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800460e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004616:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800461a:	b29b      	uxth	r3, r3
 800461c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004636:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004638:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800463c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800463e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004640:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004644:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467c:	867b      	strh	r3, [r7, #50]	; 0x32
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
 800469e:	e0ba      	b.n	8004816 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01d      	beq.n	80046f8 <USB_ActivateEndpoint+0x5a8>
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	441a      	add	r2, r3
 80046e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004708:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01d      	beq.n	8004750 <USB_ActivateEndpoint+0x600>
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800473c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004748:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800474c:	b29b      	uxth	r3, r3
 800474e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	78db      	ldrb	r3, [r3, #3]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d024      	beq.n	80047a2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004776:	f083 0320 	eor.w	r3, r3, #32
 800477a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800478c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479c:	b29b      	uxth	r3, r3
 800479e:	8013      	strh	r3, [r2, #0]
 80047a0:	e01d      	b.n	80047de <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	441a      	add	r2, r3
 80047c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	441a      	add	r2, r3
 8004800:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004812:	b29b      	uxth	r3, r3
 8004814:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004816:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800481a:	4618      	mov	r0, r3
 800481c:	376c      	adds	r7, #108	; 0x6c
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004824:	b480      	push	{r7}
 8004826:	b08d      	sub	sp, #52	; 0x34
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	7b1b      	ldrb	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 808e 	bne.w	8004954 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	785b      	ldrb	r3, [r3, #1]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d044      	beq.n	80048ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	81bb      	strh	r3, [r7, #12]
 800484e:	89bb      	ldrh	r3, [r7, #12]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <USB_DeactivateEndpoint+0x6c>
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	817b      	strh	r3, [r7, #10]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004888:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800488c:	b29b      	uxth	r3, r3
 800488e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a6:	813b      	strh	r3, [r7, #8]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	893b      	ldrh	r3, [r7, #8]
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]
 80048c8:	e192      	b.n	8004bf0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	827b      	strh	r3, [r7, #18]
 80048d8:	8a7b      	ldrh	r3, [r7, #18]
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <USB_DeactivateEndpoint+0xf6>
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	823b      	strh	r3, [r7, #16]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	8a3b      	ldrh	r3, [r7, #16]
 8004906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	81fb      	strh	r3, [r7, #14]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	441a      	add	r2, r3
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494e:	b29b      	uxth	r3, r3
 8004950:	8013      	strh	r3, [r2, #0]
 8004952:	e14d      	b.n	8004bf0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 80a5 	bne.w	8004aa8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	843b      	strh	r3, [r7, #32]
 800496c:	8c3b      	ldrh	r3, [r7, #32]
 800496e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01b      	beq.n	80049ae <USB_DeactivateEndpoint+0x18a>
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	83fb      	strh	r3, [r7, #30]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	8bfb      	ldrh	r3, [r7, #30]
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	83bb      	strh	r3, [r7, #28]
 80049bc:	8bbb      	ldrh	r3, [r7, #28]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01b      	beq.n	80049fe <USB_DeactivateEndpoint+0x1da>
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	837b      	strh	r3, [r7, #26]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	8b7b      	ldrh	r3, [r7, #26]
 80049ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a14:	833b      	strh	r3, [r7, #24]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	441a      	add	r2, r3
 8004a20:	8b3b      	ldrh	r3, [r7, #24]
 8004a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	82fb      	strh	r3, [r7, #22]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	441a      	add	r2, r3
 8004a58:	8afb      	ldrh	r3, [r7, #22]
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a84:	82bb      	strh	r3, [r7, #20]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	8abb      	ldrh	r3, [r7, #20]
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]
 8004aa6:	e0a3      	b.n	8004bf0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ab6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <USB_DeactivateEndpoint+0x2d4>
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <USB_DeactivateEndpoint+0x324>
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3734      	adds	r7, #52	; 0x34
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b0cc      	sub	sp, #304	; 0x130
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c0a:	6018      	str	r0, [r3, #0]
 8004c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c14:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	f041 817d 	bne.w	8005f22 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d908      	bls.n	8004c56 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c54:	e007      	b.n	8004c66 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	7b1b      	ldrb	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d152      	bne.n	8004d1c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6959      	ldr	r1, [r3, #20]
 8004c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	88da      	ldrh	r2, [r3, #6]
 8004c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f001 ff23 	bl	8006ae8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004caa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ccc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cd4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	440a      	add	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	011a      	lsls	r2, r3, #4
 8004cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d10:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	f001 b8b5 	b.w	8005e86 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	78db      	ldrb	r3, [r3, #3]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	f040 84c6 	bne.w	80056ba <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a1a      	ldr	r2, [r3, #32]
 8004d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	f240 8443 	bls.w	80055d2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db8:	1ad2      	subs	r2, r2, r3
 8004dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 823e 	beq.w	800526a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004df6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dfa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 809a 	bne.w	8004f48 <USB_EPStartXfer+0x34c>
 8004e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e46:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	011a      	lsls	r2, r3, #4
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d122      	bne.n	8004ec6 <USB_EPStartXfer+0x2ca>
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e079      	b.n	8004fba <USB_EPStartXfer+0x3be>
 8004ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eca:	2b3e      	cmp	r3, #62	; 0x3e
 8004ecc:	d81b      	bhi.n	8004f06 <USB_EPStartXfer+0x30a>
 8004ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <USB_EPStartXfer+0x2f2>
 8004ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	029b      	lsls	r3, r3, #10
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	801a      	strh	r2, [r3, #0]
 8004f04:	e059      	b.n	8004fba <USB_EPStartXfer+0x3be>
 8004f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <USB_EPStartXfer+0x32a>
 8004f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f20:	3b01      	subs	r3, #1
 8004f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	029b      	lsls	r3, r3, #10
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	e038      	b.n	8004fba <USB_EPStartXfer+0x3be>
 8004f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d130      	bne.n	8004fba <USB_EPStartXfer+0x3be>
 8004f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f76:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	895b      	ldrh	r3, [r3, #10]
 8004fc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6959      	ldr	r1, [r3, #20]
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fe0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fe4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	f001 fd7d 	bl	8006ae8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffe:	441a      	add	r2, r3
 8005000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800500c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	429a      	cmp	r2, r3
 8005026:	d90f      	bls.n	8005048 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6a1a      	ldr	r2, [r3, #32]
 8005034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	621a      	str	r2, [r3, #32]
 8005046:	e00e      	b.n	8005066 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	785b      	ldrb	r3, [r3, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 809a 	bne.w	80051ac <USB_EPStartXfer+0x5b0>
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005080:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005084:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509a:	b29b      	uxth	r3, r3
 800509c:	4619      	mov	r1, r3
 800509e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050aa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	440a      	add	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	011a      	lsls	r2, r3, #4
 80050c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4413      	add	r3, r2
 80050ce:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d122      	bne.n	800512a <USB_EPStartXfer+0x52e>
 80050e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005108:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511a:	b29a      	uxth	r2, r3
 800511c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	801a      	strh	r2, [r3, #0]
 8005128:	e083      	b.n	8005232 <USB_EPStartXfer+0x636>
 800512a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512e:	2b3e      	cmp	r3, #62	; 0x3e
 8005130:	d81b      	bhi.n	800516a <USB_EPStartXfer+0x56e>
 8005132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800513c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <USB_EPStartXfer+0x556>
 8005148:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800514c:	3301      	adds	r3, #1
 800514e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005152:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005156:	b29b      	uxth	r3, r3
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	b29a      	uxth	r2, r3
 800515c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005160:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e063      	b.n	8005232 <USB_EPStartXfer+0x636>
 800516a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <USB_EPStartXfer+0x58e>
 8005180:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005184:	3b01      	subs	r3, #1
 8005186:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800518a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800518e:	b29b      	uxth	r3, r3
 8005190:	029b      	lsls	r3, r3, #10
 8005192:	b29b      	uxth	r3, r3
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29a      	uxth	r2, r3
 800519e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	e042      	b.n	8005232 <USB_EPStartXfer+0x636>
 80051ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d13a      	bne.n	8005232 <USB_EPStartXfer+0x636>
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051c8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	4619      	mov	r1, r3
 80051e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	440a      	add	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	011a      	lsls	r2, r3, #4
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4413      	add	r3, r2
 8005212:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005224:	b29a      	uxth	r2, r3
 8005226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	891b      	ldrh	r3, [r3, #8]
 800523e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6959      	ldr	r1, [r3, #20]
 800524e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005252:	b29b      	uxth	r3, r3
 8005254:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005258:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800525c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005260:	6800      	ldr	r0, [r0, #0]
 8005262:	f001 fc41 	bl	8006ae8 <USB_WritePMA>
 8005266:	f000 be0e 	b.w	8005e86 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d16d      	bne.n	8005356 <USB_EPStartXfer+0x75a>
 800527a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	64bb      	str	r3, [r7, #72]	; 0x48
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529a:	4413      	add	r3, r2
 800529c:	64bb      	str	r3, [r7, #72]	; 0x48
 800529e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	011a      	lsls	r2, r3, #4
 80052ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
 80052b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d112      	bne.n	80052e4 <USB_EPStartXfer+0x6e8>
 80052be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052dc:	b29a      	uxth	r2, r3
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e063      	b.n	80053ac <USB_EPStartXfer+0x7b0>
 80052e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e8:	2b3e      	cmp	r3, #62	; 0x3e
 80052ea:	d817      	bhi.n	800531c <USB_EPStartXfer+0x720>
 80052ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <USB_EPStartXfer+0x710>
 8005302:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005306:	3301      	adds	r3, #1
 8005308:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800530c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005310:	b29b      	uxth	r3, r3
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	b29a      	uxth	r2, r3
 8005316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e047      	b.n	80053ac <USB_EPStartXfer+0x7b0>
 800531c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <USB_EPStartXfer+0x740>
 8005332:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005336:	3b01      	subs	r3, #1
 8005338:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800533c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005340:	b29b      	uxth	r3, r3
 8005342:	029b      	lsls	r3, r3, #10
 8005344:	b29b      	uxth	r3, r3
 8005346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534e:	b29a      	uxth	r2, r3
 8005350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	e02a      	b.n	80053ac <USB_EPStartXfer+0x7b0>
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d122      	bne.n	80053ac <USB_EPStartXfer+0x7b0>
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	653b      	str	r3, [r7, #80]	; 0x50
 8005372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005380:	b29b      	uxth	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005386:	4413      	add	r3, r2
 8005388:	653b      	str	r3, [r7, #80]	; 0x50
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	011a      	lsls	r2, r3, #4
 8005398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539a:	4413      	add	r3, r2
 800539c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	891b      	ldrh	r3, [r3, #8]
 80053b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6959      	ldr	r1, [r3, #20]
 80053c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053d2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	f001 fb84 	bl	8006ae8 <USB_WritePMA>
            ep->xfer_buff += len;
 80053e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f0:	441a      	add	r2, r3
 80053f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d90f      	bls.n	800543a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800541a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	621a      	str	r2, [r3, #32]
 8005438:	e00e      	b.n	8005458 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800544a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d16d      	bne.n	8005550 <USB_EPStartXfer+0x954>
 8005474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548e:	b29b      	uxth	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	4413      	add	r3, r2
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
 8005498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	011a      	lsls	r2, r3, #4
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	4413      	add	r3, r2
 80054aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
 80054b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d112      	bne.n	80054de <USB_EPStartXfer+0x8e2>
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	e05d      	b.n	800559a <USB_EPStartXfer+0x99e>
 80054de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e2:	2b3e      	cmp	r3, #62	; 0x3e
 80054e4:	d817      	bhi.n	8005516 <USB_EPStartXfer+0x91a>
 80054e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d004      	beq.n	8005506 <USB_EPStartXfer+0x90a>
 80054fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005500:	3301      	adds	r3, #1
 8005502:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005506:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800550a:	b29b      	uxth	r3, r3
 800550c:	029b      	lsls	r3, r3, #10
 800550e:	b29a      	uxth	r2, r3
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	801a      	strh	r2, [r3, #0]
 8005514:	e041      	b.n	800559a <USB_EPStartXfer+0x99e>
 8005516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005524:	f003 031f 	and.w	r3, r3, #31
 8005528:	2b00      	cmp	r3, #0
 800552a:	d104      	bne.n	8005536 <USB_EPStartXfer+0x93a>
 800552c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005530:	3b01      	subs	r3, #1
 8005532:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005536:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800553a:	b29b      	uxth	r3, r3
 800553c:	029b      	lsls	r3, r3, #10
 800553e:	b29b      	uxth	r3, r3
 8005540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005548:	b29a      	uxth	r2, r3
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	e024      	b.n	800559a <USB_EPStartXfer+0x99e>
 8005550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d11c      	bne.n	800559a <USB_EPStartXfer+0x99e>
 8005560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005574:	4413      	add	r3, r2
 8005576:	643b      	str	r3, [r7, #64]	; 0x40
 8005578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005588:	4413      	add	r3, r2
 800558a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800558e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005594:	b29a      	uxth	r2, r3
 8005596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005598:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	895b      	ldrh	r3, [r3, #10]
 80055a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6959      	ldr	r1, [r3, #20]
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055c8:	6800      	ldr	r0, [r0, #0]
 80055ca:	f001 fa8d 	bl	8006ae8 <USB_WritePMA>
 80055ce:	f000 bc5a 	b.w	8005e86 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005608:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800560c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	441a      	add	r2, r3
 8005626:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565e:	4413      	add	r3, r2
 8005660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	011a      	lsls	r2, r3, #4
 8005670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005672:	4413      	add	r3, r2
 8005674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005678:	65bb      	str	r3, [r7, #88]	; 0x58
 800567a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567e:	b29a      	uxth	r2, r3
 8005680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005682:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	891b      	ldrh	r3, [r3, #8]
 8005690:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6959      	ldr	r1, [r3, #20]
 80056a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056aa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056ae:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056b2:	6800      	ldr	r0, [r0, #0]
 80056b4:	f001 fa18 	bl	8006ae8 <USB_WritePMA>
 80056b8:	e3e5      	b.n	8005e86 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80056ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 81bc 	beq.w	8005ad4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800575c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d16d      	bne.n	8005856 <USB_EPStartXfer+0xc5a>
 800577a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	67bb      	str	r3, [r7, #120]	; 0x78
 8005786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579a:	4413      	add	r3, r2
 800579c:	67bb      	str	r3, [r7, #120]	; 0x78
 800579e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	011a      	lsls	r2, r3, #4
 80057ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ae:	4413      	add	r3, r2
 80057b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057b4:	677b      	str	r3, [r7, #116]	; 0x74
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d112      	bne.n	80057e4 <USB_EPStartXfer+0xbe8>
 80057be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	e060      	b.n	80058a6 <USB_EPStartXfer+0xcaa>
 80057e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e8:	2b3e      	cmp	r3, #62	; 0x3e
 80057ea:	d817      	bhi.n	800581c <USB_EPStartXfer+0xc20>
 80057ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <USB_EPStartXfer+0xc10>
 8005802:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005806:	3301      	adds	r3, #1
 8005808:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800580c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005810:	b29b      	uxth	r3, r3
 8005812:	029b      	lsls	r3, r3, #10
 8005814:	b29a      	uxth	r2, r3
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	801a      	strh	r2, [r3, #0]
 800581a:	e044      	b.n	80058a6 <USB_EPStartXfer+0xcaa>
 800581c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <USB_EPStartXfer+0xc40>
 8005832:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005836:	3b01      	subs	r3, #1
 8005838:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800583c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005840:	b29b      	uxth	r3, r3
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	b29b      	uxth	r3, r3
 8005846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584e:	b29a      	uxth	r2, r3
 8005850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e027      	b.n	80058a6 <USB_EPStartXfer+0xcaa>
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d11f      	bne.n	80058a6 <USB_EPStartXfer+0xcaa>
 8005866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800587c:	4413      	add	r3, r2
 800587e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	011a      	lsls	r2, r3, #4
 8005890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005894:	4413      	add	r3, r2
 8005896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800589a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800589c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	895b      	ldrh	r3, [r3, #10]
 80058b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6959      	ldr	r1, [r3, #20]
 80058c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058d4:	6800      	ldr	r0, [r0, #0]
 80058d6:	f001 f907 	bl	8006ae8 <USB_WritePMA>
          ep->xfer_buff += len;
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	441a      	add	r2, r3
 80058ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d90f      	bls.n	8005934 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	621a      	str	r2, [r3, #32]
 8005932:	e00e      	b.n	8005952 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8295 	beq.w	8005e86 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d16d      	bne.n	8005a48 <USB_EPStartXfer+0xe4c>
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	66bb      	str	r3, [r7, #104]	; 0x68
 8005978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005986:	b29b      	uxth	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800598c:	4413      	add	r3, r2
 800598e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	011a      	lsls	r2, r3, #4
 800599e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a0:	4413      	add	r3, r2
 80059a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059a6:	667b      	str	r3, [r7, #100]	; 0x64
 80059a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d112      	bne.n	80059d6 <USB_EPStartXfer+0xdda>
 80059b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	e063      	b.n	8005a9e <USB_EPStartXfer+0xea2>
 80059d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059da:	2b3e      	cmp	r3, #62	; 0x3e
 80059dc:	d817      	bhi.n	8005a0e <USB_EPStartXfer+0xe12>
 80059de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e2:	085b      	lsrs	r3, r3, #1
 80059e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <USB_EPStartXfer+0xe02>
 80059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f8:	3301      	adds	r3, #1
 80059fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	029b      	lsls	r3, r3, #10
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	e047      	b.n	8005a9e <USB_EPStartXfer+0xea2>
 8005a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <USB_EPStartXfer+0xe32>
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	029b      	lsls	r3, r3, #10
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e02a      	b.n	8005a9e <USB_EPStartXfer+0xea2>
 8005a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d122      	bne.n	8005a9e <USB_EPStartXfer+0xea2>
 8005a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	673b      	str	r3, [r7, #112]	; 0x70
 8005a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a78:	4413      	add	r3, r2
 8005a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	011a      	lsls	r2, r3, #4
 8005a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	891b      	ldrh	r3, [r3, #8]
 8005aaa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6959      	ldr	r1, [r3, #20]
 8005aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ac4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ac8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005acc:	6800      	ldr	r0, [r0, #0]
 8005ace:	f001 f80b 	bl	8006ae8 <USB_WritePMA>
 8005ad2:	e1d8      	b.n	8005e86 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d178      	bne.n	8005bd6 <USB_EPStartXfer+0xfda>
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b08:	4413      	add	r3, r2
 8005b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d116      	bne.n	8005b60 <USB_EPStartXfer+0xf64>
 8005b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e06b      	b.n	8005c38 <USB_EPStartXfer+0x103c>
 8005b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b64:	2b3e      	cmp	r3, #62	; 0x3e
 8005b66:	d818      	bhi.n	8005b9a <USB_EPStartXfer+0xf9e>
 8005b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <USB_EPStartXfer+0xf8c>
 8005b7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b82:	3301      	adds	r3, #1
 8005b84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	029b      	lsls	r3, r3, #10
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e04e      	b.n	8005c38 <USB_EPStartXfer+0x103c>
 8005b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <USB_EPStartXfer+0xfbe>
 8005bb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	e030      	b.n	8005c38 <USB_EPStartXfer+0x103c>
 8005bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d128      	bne.n	8005c38 <USB_EPStartXfer+0x103c>
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011a      	lsls	r2, r3, #4
 8005c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c22:	4413      	add	r3, r2
 8005c24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	891b      	ldrh	r3, [r3, #8]
 8005c44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6959      	ldr	r1, [r3, #20]
 8005c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c5e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c62:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c66:	6800      	ldr	r0, [r0, #0]
 8005c68:	f000 ff3e 	bl	8006ae8 <USB_WritePMA>
          ep->xfer_buff += len;
 8005c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7c:	441a      	add	r2, r3
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d90f      	bls.n	8005cc6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	1ad2      	subs	r2, r2, r3
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	621a      	str	r2, [r3, #32]
 8005cc4:	e00e      	b.n	8005ce4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80cc 	beq.w	8005e86 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d178      	bne.n	8005dfe <USB_EPStartXfer+0x1202>
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d30:	4413      	add	r3, r2
 8005d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	011a      	lsls	r2, r3, #4
 8005d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d116      	bne.n	8005d88 <USB_EPStartXfer+0x118c>
 8005d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	e064      	b.n	8005e52 <USB_EPStartXfer+0x1256>
 8005d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d8e:	d818      	bhi.n	8005dc2 <USB_EPStartXfer+0x11c6>
 8005d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <USB_EPStartXfer+0x11b4>
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	3301      	adds	r3, #1
 8005dac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	e047      	b.n	8005e52 <USB_EPStartXfer+0x1256>
 8005dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d104      	bne.n	8005de2 <USB_EPStartXfer+0x11e6>
 8005dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e029      	b.n	8005e52 <USB_EPStartXfer+0x1256>
 8005dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d121      	bne.n	8005e52 <USB_EPStartXfer+0x1256>
 8005e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e24:	4413      	add	r3, r2
 8005e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	011a      	lsls	r2, r3, #4
 8005e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	895b      	ldrh	r3, [r3, #10]
 8005e5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6959      	ldr	r1, [r3, #20]
 8005e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e80:	6800      	ldr	r0, [r0, #0]
 8005e82:	f000 fe31 	bl	8006ae8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ea8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb4:	8013      	strh	r3, [r2, #0]
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ebe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ec2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	f082 0210 	eor.w	r2, r2, #16
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ed6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eda:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	f082 0220 	eor.w	r2, r2, #32
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f04:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	8013      	strh	r3, [r2, #0]
 8005f1e:	f000 bc9f 	b.w	8006860 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	7b1b      	ldrb	r3, [r3, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 80ae 	bne.w	8006090 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d917      	bls.n	8005f80 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699a      	ldr	r2, [r3, #24]
 8005f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f70:	1ad2      	subs	r2, r2, r3
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	619a      	str	r2, [r3, #24]
 8005f7e:	e00e      	b.n	8005f9e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	011a      	lsls	r2, r3, #4
 8005fd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fda:	4413      	add	r3, r2
 8005fdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d116      	bne.n	800601a <USB_EPStartXfer+0x141e>
 8005fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006010:	b29a      	uxth	r2, r3
 8006012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	e3e8      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
 800601a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601e:	2b3e      	cmp	r3, #62	; 0x3e
 8006020:	d818      	bhi.n	8006054 <USB_EPStartXfer+0x1458>
 8006022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006026:	085b      	lsrs	r3, r3, #1
 8006028:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800602c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <USB_EPStartXfer+0x1446>
 8006038:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800603c:	3301      	adds	r3, #1
 800603e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006046:	b29b      	uxth	r3, r3
 8006048:	029b      	lsls	r3, r3, #10
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e3cb      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
 8006054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <USB_EPStartXfer+0x1478>
 800606a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800606e:	3b01      	subs	r3, #1
 8006070:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006074:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e3ad      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	78db      	ldrb	r3, [r3, #3]
 800609c:	2b02      	cmp	r3, #2
 800609e:	f040 8200 	bne.w	80064a2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 8091 	bne.w	80061d6 <USB_EPStartXfer+0x15da>
 80060b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060d8:	4413      	add	r3, r2
 80060da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	011a      	lsls	r2, r3, #4
 80060ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d116      	bne.n	8006138 <USB_EPStartXfer+0x153c>
 800610a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006116:	b29a      	uxth	r2, r3
 8006118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612e:	b29a      	uxth	r2, r3
 8006130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	e083      	b.n	8006240 <USB_EPStartXfer+0x1644>
 8006138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b3e      	cmp	r3, #62	; 0x3e
 8006146:	d820      	bhi.n	800618a <USB_EPStartXfer+0x158e>
 8006148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800615a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <USB_EPStartXfer+0x157c>
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006172:	3301      	adds	r3, #1
 8006174:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617c:	b29b      	uxth	r3, r3
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e05a      	b.n	8006240 <USB_EPStartXfer+0x1644>
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800619c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <USB_EPStartXfer+0x15be>
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b4:	3b01      	subs	r3, #1
 80061b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061be:	b29b      	uxth	r3, r3
 80061c0:	029b      	lsls	r3, r3, #10
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e034      	b.n	8006240 <USB_EPStartXfer+0x1644>
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d12c      	bne.n	8006240 <USB_EPStartXfer+0x1644>
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006202:	b29b      	uxth	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620a:	4413      	add	r3, r2
 800620c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	011a      	lsls	r2, r3, #4
 800621e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006222:	4413      	add	r3, r2
 8006224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	b29a      	uxth	r2, r3
 800623a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800624e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 8091 	bne.w	8006382 <USB_EPStartXfer+0x1786>
 8006260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800626e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006272:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006284:	4413      	add	r3, r2
 8006286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800628a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	011a      	lsls	r2, r3, #4
 8006298:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800629c:	4413      	add	r3, r2
 800629e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d116      	bne.n	80062e4 <USB_EPStartXfer+0x16e8>
 80062b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e07c      	b.n	80063de <USB_EPStartXfer+0x17e2>
 80062e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b3e      	cmp	r3, #62	; 0x3e
 80062f2:	d820      	bhi.n	8006336 <USB_EPStartXfer+0x173a>
 80062f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <USB_EPStartXfer+0x1728>
 800631a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006324:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29a      	uxth	r2, r3
 800632e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e053      	b.n	80063de <USB_EPStartXfer+0x17e2>
 8006336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USB_EPStartXfer+0x176a>
 800635c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006360:	3b01      	subs	r3, #1
 8006362:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006366:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e02d      	b.n	80063de <USB_EPStartXfer+0x17e2>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d125      	bne.n	80063de <USB_EPStartXfer+0x17e2>
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063a8:	4413      	add	r3, r2
 80063aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	011a      	lsls	r2, r3, #4
 80063bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 81fe 	beq.w	80067ec <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006410:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <USB_EPStartXfer+0x182c>
 800641c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10d      	bne.n	8006444 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006428:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800642c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 81db 	bne.w	80067ec <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006436:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 81d4 	bne.w	80067ec <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]
 80064a0:	e1a4      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	78db      	ldrb	r3, [r3, #3]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	f040 819a 	bne.w	80067e8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699a      	ldr	r2, [r3, #24]
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d917      	bls.n	8006500 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	619a      	str	r2, [r3, #24]
 80064fe:	e00e      	b.n	800651e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d178      	bne.n	8006620 <USB_EPStartXfer+0x1a24>
 800652e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800653c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006552:	4413      	add	r3, r2
 8006554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	011a      	lsls	r2, r3, #4
 8006566:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800656a:	4413      	add	r3, r2
 800656c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006570:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d116      	bne.n	80065aa <USB_EPStartXfer+0x19ae>
 800657c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	e06b      	b.n	8006682 <USB_EPStartXfer+0x1a86>
 80065aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ae:	2b3e      	cmp	r3, #62	; 0x3e
 80065b0:	d818      	bhi.n	80065e4 <USB_EPStartXfer+0x19e8>
 80065b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <USB_EPStartXfer+0x19d6>
 80065c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065cc:	3301      	adds	r3, #1
 80065ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	029b      	lsls	r3, r3, #10
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e04e      	b.n	8006682 <USB_EPStartXfer+0x1a86>
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <USB_EPStartXfer+0x1a08>
 80065fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065fe:	3b01      	subs	r3, #1
 8006600:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006608:	b29b      	uxth	r3, r3
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	b29b      	uxth	r3, r3
 800660e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e030      	b.n	8006682 <USB_EPStartXfer+0x1a86>
 8006620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d128      	bne.n	8006682 <USB_EPStartXfer+0x1a86>
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800663e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006642:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664c:	b29b      	uxth	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	4413      	add	r3, r2
 8006656:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	011a      	lsls	r2, r3, #4
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	4413      	add	r3, r2
 800666e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006672:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667a:	b29a      	uxth	r2, r3
 800667c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d178      	bne.n	8006792 <USB_EPStartXfer+0x1b96>
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c4:	4413      	add	r3, r2
 80066c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	011a      	lsls	r2, r3, #4
 80066d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066dc:	4413      	add	r3, r2
 80066de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <USB_EPStartXfer+0x1b20>
 80066ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006712:	b29a      	uxth	r2, r3
 8006714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	e067      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
 800671c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006720:	2b3e      	cmp	r3, #62	; 0x3e
 8006722:	d818      	bhi.n	8006756 <USB_EPStartXfer+0x1b5a>
 8006724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800672e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <USB_EPStartXfer+0x1b48>
 800673a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800673e:	3301      	adds	r3, #1
 8006740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006744:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006748:	b29b      	uxth	r3, r3
 800674a:	029b      	lsls	r3, r3, #10
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e04a      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
 8006756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <USB_EPStartXfer+0x1b7a>
 800676c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006770:	3b01      	subs	r3, #1
 8006772:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29b      	uxth	r3, r3
 8006780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006788:	b29a      	uxth	r2, r3
 800678a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	e02c      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d124      	bne.n	80067ec <USB_EPStartXfer+0x1bf0>
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b8:	4413      	add	r3, r2
 80067ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	011a      	lsls	r2, r3, #4
 80067cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e001      	b.n	80067ec <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e03a      	b.n	8006862 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006816:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800681a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800681e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006822:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006826:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800682a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800682e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d020      	beq.n	80068c0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006894:	81bb      	strh	r3, [r7, #12]
 8006896:	89bb      	ldrh	r3, [r7, #12]
 8006898:	f083 0310 	eor.w	r3, r3, #16
 800689c:	81bb      	strh	r3, [r7, #12]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	89bb      	ldrh	r3, [r7, #12]
 80068aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	8013      	strh	r3, [r2, #0]
 80068be:	e01f      	b.n	8006900 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d6:	81fb      	strh	r3, [r7, #14]
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068de:	81fb      	strh	r3, [r7, #14]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	89fb      	ldrh	r3, [r7, #14]
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	7b1b      	ldrb	r3, [r3, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 809d 	bne.w	8006a5a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d04c      	beq.n	80069c2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	823b      	strh	r3, [r7, #16]
 8006936:	8a3b      	ldrh	r3, [r7, #16]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <USB_EPClearStall+0x6c>
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	81fb      	strh	r3, [r7, #14]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	89fb      	ldrh	r3, [r7, #14]
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006970:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	78db      	ldrb	r3, [r3, #3]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d06c      	beq.n	8006a5a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006996:	81bb      	strh	r3, [r7, #12]
 8006998:	89bb      	ldrh	r3, [r7, #12]
 800699a:	f083 0320 	eor.w	r3, r3, #32
 800699e:	81bb      	strh	r3, [r7, #12]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	89bb      	ldrh	r3, [r7, #12]
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
 80069c0:	e04b      	b.n	8006a5a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	82fb      	strh	r3, [r7, #22]
 80069d0:	8afb      	ldrh	r3, [r7, #22]
 80069d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01b      	beq.n	8006a12 <USB_EPClearStall+0x106>
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f0:	82bb      	strh	r3, [r7, #20]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	8abb      	ldrh	r3, [r7, #20]
 80069fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a28:	827b      	strh	r3, [r7, #18]
 8006a2a:	8a7b      	ldrh	r3, [r7, #18]
 8006a2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a30:	827b      	strh	r3, [r7, #18]
 8006a32:	8a7b      	ldrh	r3, [r7, #18]
 8006a34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a38:	827b      	strh	r3, [r7, #18]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	8a7b      	ldrh	r3, [r7, #18]
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2280      	movs	r2, #128	; 0x80
 8006a7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bc80      	pop	{r7}
 8006a9e:	4770      	bx	lr

08006aa0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b08d      	sub	sp, #52	; 0x34
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4611      	mov	r1, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	460b      	mov	r3, r1
 8006af8:	80fb      	strh	r3, [r7, #6]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006afe:	88bb      	ldrh	r3, [r7, #4]
 8006b00:	3301      	adds	r3, #1
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	005a      	lsls	r2, r3, #1
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b20:	e01e      	b.n	8006b60 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	3302      	adds	r3, #2
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	3301      	adds	r3, #1
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1dd      	bne.n	8006b22 <USB_WritePMA+0x3a>
  }
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	3734      	adds	r7, #52	; 0x34
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b08b      	sub	sp, #44	; 0x2c
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	461a      	mov	r2, r3
 8006b80:	460b      	mov	r3, r1
 8006b82:	80fb      	strh	r3, [r7, #6]
 8006b84:	4613      	mov	r3, r2
 8006b86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b88:	88bb      	ldrh	r3, [r7, #4]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	005a      	lsls	r2, r3, #1
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	e01b      	b.n	8006be4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	3302      	adds	r3, #2
 8006bdc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	3b01      	subs	r3, #1
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e0      	bne.n	8006bac <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bea:	88bb      	ldrh	r3, [r7, #4]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	701a      	strb	r2, [r3, #0]
  }
}
 8006c06:	bf00      	nop
 8006c08:	372c      	adds	r7, #44	; 0x2c
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7c1b      	ldrb	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d115      	bne.n	8006c54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	2181      	movs	r1, #129	; 0x81
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 ffb0 	bl	8008b96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c40:	2202      	movs	r2, #2
 8006c42:	2101      	movs	r1, #1
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 ffa6 	bl	8008b96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c52:	e012      	b.n	8006c7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c54:	2340      	movs	r3, #64	; 0x40
 8006c56:	2202      	movs	r2, #2
 8006c58:	2181      	movs	r1, #129	; 0x81
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 ff9b 	bl	8008b96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c66:	2340      	movs	r3, #64	; 0x40
 8006c68:	2202      	movs	r2, #2
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 ff92 	bl	8008b96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	2203      	movs	r2, #3
 8006c7e:	2182      	movs	r1, #130	; 0x82
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 ff88 	bl	8008b96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c90:	f002 f8a8 	bl	8008de4 <USBD_static_malloc>
 8006c94:	4602      	mov	r2, r0
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	73fb      	strb	r3, [r7, #15]
 8006caa:	e026      	b.n	8006cfa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7c1b      	ldrb	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f002 f848 	bl	8008d78 <USBD_LL_PrepareReceive>
 8006ce8:	e007      	b.n	8006cfa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf0:	2340      	movs	r3, #64	; 0x40
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f002 f83f 	bl	8008d78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d14:	2181      	movs	r1, #129	; 0x81
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 ff63 	bl	8008be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d22:	2101      	movs	r1, #1
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 ff5c 	bl	8008be2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d32:	2182      	movs	r1, #130	; 0x82
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 ff54 	bl	8008be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f002 f84e 	bl	8008dfc <USBD_static_free>
    pdev->pClassData = NULL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d82:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d039      	beq.n	8006e10 <USBD_CDC_Setup+0x9e>
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d17f      	bne.n	8006ea0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	88db      	ldrh	r3, [r3, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d029      	beq.n	8006dfc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da11      	bge.n	8006dd6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006dbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	88d2      	ldrh	r2, [r2, #6]
 8006dc4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dc6:	6939      	ldr	r1, [r7, #16]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	88db      	ldrh	r3, [r3, #6]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fa09 	bl	80081e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006dd4:	e06b      	b.n	8006eae <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	785a      	ldrb	r2, [r3, #1]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	88db      	ldrh	r3, [r3, #6]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dec:	6939      	ldr	r1, [r7, #16]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	88db      	ldrh	r3, [r3, #6]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fa24 	bl	8008242 <USBD_CtlPrepareRx>
      break;
 8006dfa:	e058      	b.n	8006eae <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	7850      	ldrb	r0, [r2, #1]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	4798      	blx	r3
      break;
 8006e0e:	e04e      	b.n	8006eae <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b0b      	cmp	r3, #11
 8006e16:	d02e      	beq.n	8006e76 <USBD_CDC_Setup+0x104>
 8006e18:	2b0b      	cmp	r3, #11
 8006e1a:	dc38      	bgt.n	8006e8e <USBD_CDC_Setup+0x11c>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <USBD_CDC_Setup+0xb4>
 8006e20:	2b0a      	cmp	r3, #10
 8006e22:	d014      	beq.n	8006e4e <USBD_CDC_Setup+0xdc>
 8006e24:	e033      	b.n	8006e8e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d107      	bne.n	8006e40 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e30:	f107 030c 	add.w	r3, r7, #12
 8006e34:	2202      	movs	r2, #2
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f9d4 	bl	80081e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e3e:	e02e      	b.n	8006e9e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 f965 	bl	8008112 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e4c:	e027      	b.n	8006e9e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d107      	bne.n	8006e68 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e58:	f107 030f 	add.w	r3, r7, #15
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f9c0 	bl	80081e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e66:	e01a      	b.n	8006e9e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f951 	bl	8008112 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e70:	2302      	movs	r3, #2
 8006e72:	75fb      	strb	r3, [r7, #23]
          break;
 8006e74:	e013      	b.n	8006e9e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d00d      	beq.n	8006e9c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 f945 	bl	8008112 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e8c:	e006      	b.n	8006e9c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f93e 	bl	8008112 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e96:	2302      	movs	r3, #2
 8006e98:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9a:	e000      	b.n	8006e9e <USBD_CDC_Setup+0x12c>
          break;
 8006e9c:	bf00      	nop
      }
      break;
 8006e9e:	e006      	b.n	8006eae <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 f935 	bl	8008112 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006eac:	bf00      	nop
  }

  return ret;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ed2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d03a      	beq.n	8006f54 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	331c      	adds	r3, #28
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d029      	beq.n	8006f48 <USBD_CDC_DataIn+0x90>
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	331c      	adds	r3, #28
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	78f9      	ldrb	r1, [r7, #3]
 8006f08:	68b8      	ldr	r0, [r7, #8]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	4403      	add	r3, r0
 8006f14:	3338      	adds	r3, #56	; 0x38
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f1c:	fb01 f303 	mul.w	r3, r1, r3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d110      	bne.n	8006f48 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	331c      	adds	r3, #28
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f3a:	78f9      	ldrb	r1, [r7, #3]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 fef6 	bl	8008d32 <USBD_LL_Transmit>
 8006f46:	e003      	b.n	8006f50 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e000      	b.n	8006f56 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f54:	2302      	movs	r3, #2
  }
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f70:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 ff21 	bl	8008dbe <USBD_LL_GetRxDataSize>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00d      	beq.n	8006faa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	4798      	blx	r3

    return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e000      	b.n	8006fac <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006faa:	2302      	movs	r3, #2
  }
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d015      	beq.n	8006ffa <USBD_CDC_EP0_RxReady+0x46>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fd4:	2bff      	cmp	r3, #255	; 0xff
 8006fd6:	d010      	beq.n	8006ffa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fe6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fee:	b292      	uxth	r2, r2
 8006ff0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2243      	movs	r2, #67	; 0x43
 8007010:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007012:	4b03      	ldr	r3, [pc, #12]	; (8007020 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20000094 	.word	0x20000094

08007024 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2243      	movs	r2, #67	; 0x43
 8007030:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	20000050 	.word	0x20000050

08007044 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2243      	movs	r2, #67	; 0x43
 8007050:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007052:	4b03      	ldr	r3, [pc, #12]	; (8007060 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	bc80      	pop	{r7}
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	200000d8 	.word	0x200000d8

08007064 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	220a      	movs	r2, #10
 8007070:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007072:	4b03      	ldr	r3, [pc, #12]	; (8007080 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	2000000c 	.word	0x2000000c

08007084 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800708e:	2302      	movs	r3, #2
 8007090:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr

080070b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr

080070e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b085      	sub	sp, #20
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01c      	beq.n	800715c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007128:	2b00      	cmp	r3, #0
 800712a:	d115      	bne.n	8007158 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800714a:	b29b      	uxth	r3, r3
 800714c:	2181      	movs	r1, #129	; 0x81
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fdef 	bl	8008d32 <USBD_LL_Transmit>

      return USBD_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e002      	b.n	800715e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800715c:	2302      	movs	r3, #2
  }
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007174:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d017      	beq.n	80071b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7c1b      	ldrb	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d109      	bne.n	800719c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800718e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007192:	2101      	movs	r1, #1
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fdef 	bl	8008d78 <USBD_LL_PrepareReceive>
 800719a:	e007      	b.n	80071ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071a2:	2340      	movs	r3, #64	; 0x40
 80071a4:	2101      	movs	r1, #1
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fde6 	bl	8008d78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	4613      	mov	r3, r2
 80071c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071ce:	2302      	movs	r3, #2
 80071d0:	e01a      	b.n	8007208 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	79fa      	ldrb	r2, [r7, #7]
 80071fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f001 fc53 	bl	8008aac <USBD_LL_Init>

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d006      	beq.n	8007232 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]
 8007230:	e001      	b.n	8007236 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr

08007242 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fc88 	bl	8008b60 <USBD_LL_Start>

  return USBD_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00c      	beq.n	80072a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	78fa      	ldrb	r2, [r7, #3]
 8007292:	4611      	mov	r1, r2
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	4611      	mov	r1, r2
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	4798      	blx	r3

  return USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fed8 	bl	800809a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	2b02      	cmp	r3, #2
 800730c:	d016      	beq.n	800733c <USBD_LL_SetupStage+0x6a>
 800730e:	2b02      	cmp	r3, #2
 8007310:	d81c      	bhi.n	800734c <USBD_LL_SetupStage+0x7a>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <USBD_LL_SetupStage+0x4a>
 8007316:	2b01      	cmp	r3, #1
 8007318:	d008      	beq.n	800732c <USBD_LL_SetupStage+0x5a>
 800731a:	e017      	b.n	800734c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f9cb 	bl	80076c0 <USBD_StdDevReq>
      break;
 800732a:	e01a      	b.n	8007362 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa2d 	bl	8007794 <USBD_StdItfReq>
      break;
 800733a:	e012      	b.n	8007362 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa6d 	bl	8007824 <USBD_StdEPReq>
      break;
 800734a:	e00a      	b.n	8007362 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007352:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007356:	b2db      	uxtb	r3, r3
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 fc60 	bl	8008c20 <USBD_LL_StallEP>
      break;
 8007360:	bf00      	nop
  }

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	460b      	mov	r3, r1
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d14b      	bne.n	8007418 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007386:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800738e:	2b03      	cmp	r3, #3
 8007390:	d134      	bne.n	80073fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d919      	bls.n	80073d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d203      	bcs.n	80073c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073bc:	b29b      	uxth	r3, r3
 80073be:	e002      	b.n	80073c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	461a      	mov	r2, r3
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 ff57 	bl	800827e <USBD_CtlContinueRx>
 80073d0:	e038      	b.n	8007444 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d105      	bne.n	80073f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 ff54 	bl	80082a2 <USBD_CtlSendStatus>
 80073fa:	e023      	b.n	8007444 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007402:	2b05      	cmp	r3, #5
 8007404:	d11e      	bne.n	8007444 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800740e:	2100      	movs	r1, #0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f001 fc05 	bl	8008c20 <USBD_LL_StallEP>
 8007416:	e015      	b.n	8007444 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00d      	beq.n	8007440 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800742a:	2b03      	cmp	r3, #3
 800742c:	d108      	bne.n	8007440 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	7afa      	ldrb	r2, [r7, #11]
 8007438:	4611      	mov	r1, r2
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	4798      	blx	r3
 800743e:	e001      	b.n	8007444 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007440:	2302      	movs	r3, #2
 8007442:	e000      	b.n	8007446 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b086      	sub	sp, #24
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	460b      	mov	r3, r1
 8007458:	607a      	str	r2, [r7, #4]
 800745a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d17f      	bne.n	8007562 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3314      	adds	r3, #20
 8007466:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800746e:	2b02      	cmp	r3, #2
 8007470:	d15c      	bne.n	800752c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	429a      	cmp	r2, r3
 800747c:	d915      	bls.n	80074aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	b29b      	uxth	r3, r3
 8007492:	461a      	mov	r2, r3
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fec1 	bl	800821e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800749c:	2300      	movs	r3, #0
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f001 fc68 	bl	8008d78 <USBD_LL_PrepareReceive>
 80074a8:	e04e      	b.n	8007548 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	6912      	ldr	r2, [r2, #16]
 80074b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80074b6:	fb01 f202 	mul.w	r2, r1, r2
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d11c      	bne.n	80074fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d316      	bcc.n	80074fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d20f      	bcs.n	80074fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fe9d 	bl	800821e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	2100      	movs	r1, #0
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f001 fc40 	bl	8008d78 <USBD_LL_PrepareReceive>
 80074f8:	e026      	b.n	8007548 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800750c:	2b03      	cmp	r3, #3
 800750e:	d105      	bne.n	800751c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800751c:	2180      	movs	r1, #128	; 0x80
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f001 fb7e 	bl	8008c20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fecf 	bl	80082c8 <USBD_CtlReceiveStatus>
 800752a:	e00d      	b.n	8007548 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007532:	2b04      	cmp	r3, #4
 8007534:	d004      	beq.n	8007540 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800753c:	2b00      	cmp	r3, #0
 800753e:	d103      	bne.n	8007548 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007540:	2180      	movs	r1, #128	; 0x80
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 fb6c 	bl	8008c20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d11d      	bne.n	800758e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff fe81 	bl	800725a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007560:	e015      	b.n	800758e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007574:	2b03      	cmp	r3, #3
 8007576:	d108      	bne.n	800758a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	7afa      	ldrb	r2, [r7, #11]
 8007582:	4611      	mov	r1, r2
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	4798      	blx	r3
 8007588:	e001      	b.n	800758e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	e000      	b.n	8007590 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	2200      	movs	r2, #0
 80075a4:	2100      	movs	r1, #0
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 faf5 	bl	8008b96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2240      	movs	r2, #64	; 0x40
 80075b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075bc:	2340      	movs	r3, #64	; 0x40
 80075be:	2200      	movs	r2, #0
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fae7 	bl	8008b96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2240      	movs	r2, #64	; 0x40
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d009      	beq.n	8007610 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6852      	ldr	r2, [r2, #4]
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	4611      	mov	r1, r2
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
  }

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2204      	movs	r2, #4
 8007650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr

08007660 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766e:	2b04      	cmp	r3, #4
 8007670:	d105      	bne.n	800767e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr

0800768a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007698:	2b03      	cmp	r3, #3
 800769a:	d10b      	bne.n	80076b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d005      	beq.n	80076e6 <USBD_StdDevReq+0x26>
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d84f      	bhi.n	800777e <USBD_StdDevReq+0xbe>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <USBD_StdDevReq+0x36>
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d14b      	bne.n	800777e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
      break;
 80076f4:	e048      	b.n	8007788 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	2b09      	cmp	r3, #9
 80076fc:	d839      	bhi.n	8007772 <USBD_StdDevReq+0xb2>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <USBD_StdDevReq+0x44>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007755 	.word	0x08007755
 8007708:	08007769 	.word	0x08007769
 800770c:	08007773 	.word	0x08007773
 8007710:	0800775f 	.word	0x0800775f
 8007714:	08007773 	.word	0x08007773
 8007718:	08007737 	.word	0x08007737
 800771c:	0800772d 	.word	0x0800772d
 8007720:	08007773 	.word	0x08007773
 8007724:	0800774b 	.word	0x0800774b
 8007728:	08007741 	.word	0x08007741
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9dc 	bl	8007aec <USBD_GetDescriptor>
          break;
 8007734:	e022      	b.n	800777c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fb3f 	bl	8007dbc <USBD_SetAddress>
          break;
 800773e:	e01d      	b.n	800777c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fb7e 	bl	8007e44 <USBD_SetConfig>
          break;
 8007748:	e018      	b.n	800777c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc07 	bl	8007f60 <USBD_GetConfig>
          break;
 8007752:	e013      	b.n	800777c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fc37 	bl	8007fca <USBD_GetStatus>
          break;
 800775c:	e00e      	b.n	800777c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc65 	bl	8008030 <USBD_SetFeature>
          break;
 8007766:	e009      	b.n	800777c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fc74 	bl	8008058 <USBD_ClrFeature>
          break;
 8007770:	e004      	b.n	800777c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fccc 	bl	8008112 <USBD_CtlError>
          break;
 800777a:	bf00      	nop
      }
      break;
 800777c:	e004      	b.n	8007788 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fcc6 	bl	8008112 <USBD_CtlError>
      break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d005      	beq.n	80077ba <USBD_StdItfReq+0x26>
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d82e      	bhi.n	8007810 <USBD_StdItfReq+0x7c>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <USBD_StdItfReq+0x26>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d12a      	bne.n	8007810 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c0:	3b01      	subs	r3, #1
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d81d      	bhi.n	8007802 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	889b      	ldrh	r3, [r3, #4]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d813      	bhi.n	80077f8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	4798      	blx	r3
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d110      	bne.n	800780c <USBD_StdItfReq+0x78>
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fd56 	bl	80082a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077f6:	e009      	b.n	800780c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fc89 	bl	8008112 <USBD_CtlError>
          break;
 8007800:	e004      	b.n	800780c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fc84 	bl	8008112 <USBD_CtlError>
          break;
 800780a:	e000      	b.n	800780e <USBD_StdItfReq+0x7a>
          break;
 800780c:	bf00      	nop
      }
      break;
 800780e:	e004      	b.n	800781a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc7d 	bl	8008112 <USBD_CtlError>
      break;
 8007818:	bf00      	nop
  }

  return USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	889b      	ldrh	r3, [r3, #4]
 8007836:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d007      	beq.n	8007854 <USBD_StdEPReq+0x30>
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	f200 8146 	bhi.w	8007ad6 <USBD_StdEPReq+0x2b2>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <USBD_StdEPReq+0x40>
 800784e:	2b20      	cmp	r3, #32
 8007850:	f040 8141 	bne.w	8007ad6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
      break;
 8007862:	e13d      	b.n	8007ae0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800786c:	2b20      	cmp	r3, #32
 800786e:	d10a      	bne.n	8007886 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	e12d      	b.n	8007ae2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b03      	cmp	r3, #3
 800788c:	d007      	beq.n	800789e <USBD_StdEPReq+0x7a>
 800788e:	2b03      	cmp	r3, #3
 8007890:	f300 811b 	bgt.w	8007aca <USBD_StdEPReq+0x2a6>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d072      	beq.n	800797e <USBD_StdEPReq+0x15a>
 8007898:	2b01      	cmp	r3, #1
 800789a:	d03a      	beq.n	8007912 <USBD_StdEPReq+0xee>
 800789c:	e115      	b.n	8007aca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <USBD_StdEPReq+0x8a>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d015      	beq.n	80078d8 <USBD_StdEPReq+0xb4>
 80078ac:	e02b      	b.n	8007906 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00c      	beq.n	80078ce <USBD_StdEPReq+0xaa>
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b80      	cmp	r3, #128	; 0x80
 80078b8:	d009      	beq.n	80078ce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f001 f9ae 	bl	8008c20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 f9aa 	bl	8008c20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078cc:	e020      	b.n	8007910 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc1e 	bl	8008112 <USBD_CtlError>
              break;
 80078d6:	e01b      	b.n	8007910 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	885b      	ldrh	r3, [r3, #2]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10e      	bne.n	80078fe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80078e0:	7bbb      	ldrb	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <USBD_StdEPReq+0xda>
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	2b80      	cmp	r3, #128	; 0x80
 80078ea:	d008      	beq.n	80078fe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	88db      	ldrh	r3, [r3, #6]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 f991 	bl	8008c20 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fccf 	bl	80082a2 <USBD_CtlSendStatus>

              break;
 8007904:	e004      	b.n	8007910 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc02 	bl	8008112 <USBD_CtlError>
              break;
 800790e:	bf00      	nop
          }
          break;
 8007910:	e0e0      	b.n	8007ad4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	2b02      	cmp	r3, #2
 800791a:	d002      	beq.n	8007922 <USBD_StdEPReq+0xfe>
 800791c:	2b03      	cmp	r3, #3
 800791e:	d015      	beq.n	800794c <USBD_StdEPReq+0x128>
 8007920:	e026      	b.n	8007970 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00c      	beq.n	8007942 <USBD_StdEPReq+0x11e>
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	d009      	beq.n	8007942 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 f974 	bl	8008c20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007938:	2180      	movs	r1, #128	; 0x80
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 f970 	bl	8008c20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007940:	e01c      	b.n	800797c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fbe4 	bl	8008112 <USBD_CtlError>
              break;
 800794a:	e017      	b.n	800797c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	885b      	ldrh	r3, [r3, #2]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d112      	bne.n	800797a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 f97b 	bl	8008c5e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fc9a 	bl	80082a2 <USBD_CtlSendStatus>
              }
              break;
 800796e:	e004      	b.n	800797a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fbcd 	bl	8008112 <USBD_CtlError>
              break;
 8007978:	e000      	b.n	800797c <USBD_StdEPReq+0x158>
              break;
 800797a:	bf00      	nop
          }
          break;
 800797c:	e0aa      	b.n	8007ad4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007984:	2b02      	cmp	r3, #2
 8007986:	d002      	beq.n	800798e <USBD_StdEPReq+0x16a>
 8007988:	2b03      	cmp	r3, #3
 800798a:	d032      	beq.n	80079f2 <USBD_StdEPReq+0x1ce>
 800798c:	e097      	b.n	8007abe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <USBD_StdEPReq+0x180>
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b80      	cmp	r3, #128	; 0x80
 8007998:	d004      	beq.n	80079a4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fbb8 	bl	8008112 <USBD_CtlError>
                break;
 80079a2:	e091      	b.n	8007ac8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da0b      	bge.n	80079c4 <USBD_StdEPReq+0x1a0>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	3310      	adds	r3, #16
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	e00b      	b.n	80079dc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2202      	movs	r2, #2
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fbfb 	bl	80081e6 <USBD_CtlSendData>
              break;
 80079f0:	e06a      	b.n	8007ac8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da11      	bge.n	8007a1e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	f003 020f 	and.w	r2, r3, #15
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	3318      	adds	r3, #24
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d117      	bne.n	8007a44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fb7b 	bl	8008112 <USBD_CtlError>
                  break;
 8007a1c:	e054      	b.n	8007ac8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	f003 020f 	and.w	r2, r3, #15
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fb68 	bl	8008112 <USBD_CtlError>
                  break;
 8007a42:	e041      	b.n	8007ac8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da0b      	bge.n	8007a64 <USBD_StdEPReq+0x240>
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	3310      	adds	r3, #16
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	3304      	adds	r3, #4
 8007a62:	e00b      	b.n	8007a7c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <USBD_StdEPReq+0x266>
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b80      	cmp	r3, #128	; 0x80
 8007a88:	d103      	bne.n	8007a92 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e00e      	b.n	8007ab0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f900 	bl	8008c9c <USBD_LL_IsStallEP>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e002      	b.n	8007ab0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fb95 	bl	80081e6 <USBD_CtlSendData>
              break;
 8007abc:	e004      	b.n	8007ac8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fb26 	bl	8008112 <USBD_CtlError>
              break;
 8007ac6:	bf00      	nop
          }
          break;
 8007ac8:	e004      	b.n	8007ad4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb20 	bl	8008112 <USBD_CtlError>
          break;
 8007ad2:	bf00      	nop
      }
      break;
 8007ad4:	e004      	b.n	8007ae0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fb1a 	bl	8008112 <USBD_CtlError>
      break;
 8007ade:	bf00      	nop
  }

  return ret;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	0a1b      	lsrs	r3, r3, #8
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	2b06      	cmp	r3, #6
 8007b0e:	f200 8128 	bhi.w	8007d62 <USBD_GetDescriptor+0x276>
 8007b12:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <USBD_GetDescriptor+0x2c>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b35 	.word	0x08007b35
 8007b1c:	08007b4d 	.word	0x08007b4d
 8007b20:	08007b8d 	.word	0x08007b8d
 8007b24:	08007d63 	.word	0x08007d63
 8007b28:	08007d63 	.word	0x08007d63
 8007b2c:	08007d03 	.word	0x08007d03
 8007b30:	08007d2f 	.word	0x08007d2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
      break;
 8007b4a:	e112      	b.n	8007d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7c1b      	ldrb	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10d      	bne.n	8007b70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f107 0208 	add.w	r2, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b6e:	e100      	b.n	8007d72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	f107 0208 	add.w	r2, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	2202      	movs	r2, #2
 8007b88:	701a      	strb	r2, [r3, #0]
      break;
 8007b8a:	e0f2      	b.n	8007d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	885b      	ldrh	r3, [r3, #2]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	f200 80ac 	bhi.w	8007cf0 <USBD_GetDescriptor+0x204>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <USBD_GetDescriptor+0xb4>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007c21 	.word	0x08007c21
 8007bac:	08007c55 	.word	0x08007c55
 8007bb0:	08007c89 	.word	0x08007c89
 8007bb4:	08007cbd 	.word	0x08007cbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	7c12      	ldrb	r2, [r2, #16]
 8007bd0:	f107 0108 	add.w	r1, r7, #8
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bda:	e091      	b.n	8007d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa97 	bl	8008112 <USBD_CtlError>
            err++;
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	3301      	adds	r3, #1
 8007be8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bea:	e089      	b.n	8007d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0e:	e077      	b.n	8007d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa7d 	bl	8008112 <USBD_CtlError>
            err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1e:	e06f      	b.n	8007d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c42:	e05d      	b.n	8007d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa63 	bl	8008112 <USBD_CtlError>
            err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
          break;
 8007c52:	e055      	b.n	8007d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c76:	e043      	b.n	8007d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa49 	bl	8008112 <USBD_CtlError>
            err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
          break;
 8007c86:	e03b      	b.n	8007d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007caa:	e029      	b.n	8007d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa2f 	bl	8008112 <USBD_CtlError>
            err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cba:	e021      	b.n	8007d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cde:	e00f      	b.n	8007d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa15 	bl	8008112 <USBD_CtlError>
            err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
          break;
 8007cee:	e007      	b.n	8007d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa0d 	bl	8008112 <USBD_CtlError>
          err++;
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007cfe:	e038      	b.n	8007d72 <USBD_GetDescriptor+0x286>
 8007d00:	e037      	b.n	8007d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7c1b      	ldrb	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	f107 0208 	add.w	r2, r7, #8
 8007d16:	4610      	mov	r0, r2
 8007d18:	4798      	blx	r3
 8007d1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d1c:	e029      	b.n	8007d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f9f6 	bl	8008112 <USBD_CtlError>
        err++;
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d2c:	e021      	b.n	8007d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7c1b      	ldrb	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10d      	bne.n	8007d52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	f107 0208 	add.w	r2, r7, #8
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
 8007d46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	2207      	movs	r2, #7
 8007d4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d50:	e00f      	b.n	8007d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9dc 	bl	8008112 <USBD_CtlError>
        err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d60:	e007      	b.n	8007d72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9d4 	bl	8008112 <USBD_CtlError>
      err++;
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d70:	bf00      	nop
  }

  if (err != 0U)
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11c      	bne.n	8007db2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d78:	893b      	ldrh	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <USBD_GetDescriptor+0x2b6>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	88db      	ldrh	r3, [r3, #6]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00d      	beq.n	8007da2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	88da      	ldrh	r2, [r3, #6]
 8007d8a:	893b      	ldrh	r3, [r7, #8]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	bf28      	it	cs
 8007d90:	4613      	movcs	r3, r2
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d96:	893b      	ldrh	r3, [r7, #8]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa22 	bl	80081e6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	88db      	ldrh	r3, [r3, #6]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa79 	bl	80082a2 <USBD_CtlSendStatus>
 8007db0:	e000      	b.n	8007db4 <USBD_GetDescriptor+0x2c8>
    return;
 8007db2:	bf00      	nop
    }
  }
}
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop

08007dbc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	889b      	ldrh	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d130      	bne.n	8007e30 <USBD_SetAddress+0x74>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d12c      	bne.n	8007e30 <USBD_SetAddress+0x74>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	885b      	ldrh	r3, [r3, #2]
 8007dda:	2b7f      	cmp	r3, #127	; 0x7f
 8007ddc:	d828      	bhi.n	8007e30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d104      	bne.n	8007dfe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f98b 	bl	8008112 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfc:	e01d      	b.n	8007e3a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	7bfa      	ldrb	r2, [r7, #15]
 8007e02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 ff72 	bl	8008cf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 fa46 	bl	80082a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	e009      	b.n	8007e3a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2e:	e004      	b.n	8007e3a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f96d 	bl	8008112 <USBD_CtlError>
  }
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	885b      	ldrh	r3, [r3, #2]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <USBD_SetConfig+0x118>)
 8007e56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e58:	4b40      	ldr	r3, [pc, #256]	; (8007f5c <USBD_SetConfig+0x118>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d904      	bls.n	8007e6a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f955 	bl	8008112 <USBD_CtlError>
 8007e68:	e075      	b.n	8007f56 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d002      	beq.n	8007e7a <USBD_SetConfig+0x36>
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d023      	beq.n	8007ec0 <USBD_SetConfig+0x7c>
 8007e78:	e062      	b.n	8007f40 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e7a:	4b38      	ldr	r3, [pc, #224]	; (8007f5c <USBD_SetConfig+0x118>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01a      	beq.n	8007eb8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e82:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <USBD_SetConfig+0x118>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2203      	movs	r2, #3
 8007e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e94:	4b31      	ldr	r3, [pc, #196]	; (8007f5c <USBD_SetConfig+0x118>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff f9e7 	bl	800726e <USBD_SetClassConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d104      	bne.n	8007eb0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f932 	bl	8008112 <USBD_CtlError>
            return;
 8007eae:	e052      	b.n	8007f56 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f9f6 	bl	80082a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007eb6:	e04e      	b.n	8007f56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f9f2 	bl	80082a2 <USBD_CtlSendStatus>
        break;
 8007ebe:	e04a      	b.n	8007f56 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ec0:	4b26      	ldr	r3, [pc, #152]	; (8007f5c <USBD_SetConfig+0x118>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d112      	bne.n	8007eee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ed0:	4b22      	ldr	r3, [pc, #136]	; (8007f5c <USBD_SetConfig+0x118>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007eda:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <USBD_SetConfig+0x118>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff f9e3 	bl	80072ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f9db 	bl	80082a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007eec:	e033      	b.n	8007f56 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007eee:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <USBD_SetConfig+0x118>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d01d      	beq.n	8007f38 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff f9d1 	bl	80072ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <USBD_SetConfig+0x118>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f14:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <USBD_SetConfig+0x118>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff f9a7 	bl	800726e <USBD_SetClassConfig>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d104      	bne.n	8007f30 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f8f2 	bl	8008112 <USBD_CtlError>
            return;
 8007f2e:	e012      	b.n	8007f56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f9b6 	bl	80082a2 <USBD_CtlSendStatus>
        break;
 8007f36:	e00e      	b.n	8007f56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f9b2 	bl	80082a2 <USBD_CtlSendStatus>
        break;
 8007f3e:	e00a      	b.n	8007f56 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8e5 	bl	8008112 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f48:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <USBD_SetConfig+0x118>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f9ac 	bl	80072ac <USBD_ClrClassConfig>
        break;
 8007f54:	bf00      	nop
    }
  }
}
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	200002f0 	.word	0x200002f0

08007f60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d004      	beq.n	8007f7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f8cc 	bl	8008112 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f7a:	e022      	b.n	8007fc2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	dc02      	bgt.n	8007f8c <USBD_GetConfig+0x2c>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	dc03      	bgt.n	8007f92 <USBD_GetConfig+0x32>
 8007f8a:	e015      	b.n	8007fb8 <USBD_GetConfig+0x58>
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d00b      	beq.n	8007fa8 <USBD_GetConfig+0x48>
 8007f90:	e012      	b.n	8007fb8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f920 	bl	80081e6 <USBD_CtlSendData>
        break;
 8007fa6:	e00c      	b.n	8007fc2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3304      	adds	r3, #4
 8007fac:	2201      	movs	r2, #1
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f918 	bl	80081e6 <USBD_CtlSendData>
        break;
 8007fb6:	e004      	b.n	8007fc2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f8a9 	bl	8008112 <USBD_CtlError>
        break;
 8007fc0:	bf00      	nop
}
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d81e      	bhi.n	800801e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	88db      	ldrh	r3, [r3, #6]
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d004      	beq.n	8007ff2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f891 	bl	8008112 <USBD_CtlError>
        break;
 8007ff0:	e01a      	b.n	8008028 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d005      	beq.n	800800e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f043 0202 	orr.w	r2, r3, #2
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	330c      	adds	r3, #12
 8008012:	2202      	movs	r2, #2
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f8e5 	bl	80081e6 <USBD_CtlSendData>
      break;
 800801c:	e004      	b.n	8008028 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f876 	bl	8008112 <USBD_CtlError>
      break;
 8008026:	bf00      	nop
  }
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	885b      	ldrh	r3, [r3, #2]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d106      	bne.n	8008050 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f929 	bl	80082a2 <USBD_CtlSendStatus>
  }
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008068:	3b01      	subs	r3, #1
 800806a:	2b02      	cmp	r3, #2
 800806c:	d80b      	bhi.n	8008086 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	885b      	ldrh	r3, [r3, #2]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d10c      	bne.n	8008090 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f90f 	bl	80082a2 <USBD_CtlSendStatus>
      }
      break;
 8008084:	e004      	b.n	8008090 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f842 	bl	8008112 <USBD_CtlError>
      break;
 800808e:	e000      	b.n	8008092 <USBD_ClrFeature+0x3a>
      break;
 8008090:	bf00      	nop
  }
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800809a:	b480      	push	{r7}
 800809c:	b083      	sub	sp, #12
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781a      	ldrb	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	785a      	ldrb	r2, [r3, #1]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	3302      	adds	r3, #2
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	3303      	adds	r3, #3
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4413      	add	r3, r2
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	3304      	adds	r3, #4
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	3305      	adds	r3, #5
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	4413      	add	r3, r2
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	3306      	adds	r3, #6
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	3307      	adds	r3, #7
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4413      	add	r3, r2
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	80da      	strh	r2, [r3, #6]

}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr

08008112 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fd7e 	bl	8008c20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008124:	2100      	movs	r1, #0
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fd7a 	bl	8008c20 <USBD_LL_StallEP>
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d032      	beq.n	80081b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f834 	bl	80081b8 <USBD_GetLen>
 8008150:	4603      	mov	r3, r0
 8008152:	3301      	adds	r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	75fa      	strb	r2, [r7, #23]
 8008164:	461a      	mov	r2, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	4413      	add	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	7812      	ldrb	r2, [r2, #0]
 800816e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	75fa      	strb	r2, [r7, #23]
 8008176:	461a      	mov	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4413      	add	r3, r2
 800817c:	2203      	movs	r2, #3
 800817e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008180:	e012      	b.n	80081a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	60fa      	str	r2, [r7, #12]
 8008188:	7dfa      	ldrb	r2, [r7, #23]
 800818a:	1c51      	adds	r1, r2, #1
 800818c:	75f9      	strb	r1, [r7, #23]
 800818e:	4611      	mov	r1, r2
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	440a      	add	r2, r1
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	75fa      	strb	r2, [r7, #23]
 800819e:	461a      	mov	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4413      	add	r3, r2
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e8      	bne.n	8008182 <USBD_GetString+0x4e>
    }
  }
}
 80081b0:	bf00      	nop
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081c4:	e005      	b.n	80081d2 <USBD_GetLen+0x1a>
  {
    len++;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	3301      	adds	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3301      	adds	r3, #1
 80081d0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1f5      	bne.n	80081c6 <USBD_GetLen+0xe>
  }

  return len;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bc80      	pop	{r7}
 80081e4:	4770      	bx	lr

080081e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	4613      	mov	r3, r2
 80081f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008208:	88fb      	ldrh	r3, [r7, #6]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	2100      	movs	r1, #0
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 fd8f 	bl	8008d32 <USBD_LL_Transmit>

  return USBD_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	4613      	mov	r3, r2
 800822a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	2100      	movs	r1, #0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 fd7d 	bl	8008d32 <USBD_LL_Transmit>

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	4613      	mov	r3, r2
 800824e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2203      	movs	r2, #3
 8008254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008258:	88fa      	ldrh	r2, [r7, #6]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008260:	88fa      	ldrh	r2, [r7, #6]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	2100      	movs	r1, #0
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 fd82 	bl	8008d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	4613      	mov	r3, r2
 800828a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	2100      	movs	r1, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fd70 	bl	8008d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2204      	movs	r2, #4
 80082ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082b2:	2300      	movs	r3, #0
 80082b4:	2200      	movs	r2, #0
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fd3a 	bl	8008d32 <USBD_LL_Transmit>

  return USBD_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2205      	movs	r2, #5
 80082d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082d8:	2300      	movs	r3, #0
 80082da:	2200      	movs	r2, #0
 80082dc:	2100      	movs	r1, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fd4a 	bl	8008d78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
	 * Taken from: https://github.com/philrawlings/bluepill-usb-cdc-test
	 * This forces the host to re-enumerate the device when the MCU is reset,
	 * as it is akin to unplugging the USB cable and plugging it back in.
	 * Only needed if there is a pullup resistor on the USB_DP line - as is the case with the BluePill
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f6:	463b      	mov	r3, r7
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008306:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008308:	2301      	movs	r3, #1
 800830a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800830c:	2302      	movs	r3, #2
 800830e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008310:	2303      	movs	r3, #3
 8008312:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008314:	463b      	mov	r3, r7
 8008316:	4619      	mov	r1, r3
 8008318:	481a      	ldr	r0, [pc, #104]	; (8008384 <MX_USB_DEVICE_Init+0x94>)
 800831a:	f7f8 fbc3 	bl	8000aa4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800831e:	2200      	movs	r2, #0
 8008320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008324:	4817      	ldr	r0, [pc, #92]	; (8008384 <MX_USB_DEVICE_Init+0x94>)
 8008326:	f7f8 fd41 	bl	8000dac <HAL_GPIO_WritePin>
	HAL_Delay(500); // Nasrul 20221124 - Was 100ms which already enough, but I changed to 500ms to just to be really sure
 800832a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800832e:	f7f8 fa87 	bl	8000840 <HAL_Delay>
	// Nasrul 20221124 - End
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008332:	2200      	movs	r2, #0
 8008334:	4914      	ldr	r1, [pc, #80]	; (8008388 <MX_USB_DEVICE_Init+0x98>)
 8008336:	4815      	ldr	r0, [pc, #84]	; (800838c <MX_USB_DEVICE_Init+0x9c>)
 8008338:	f7fe ff3f 	bl	80071ba <USBD_Init>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
 8008342:	f7f8 f985 	bl	8000650 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008346:	4912      	ldr	r1, [pc, #72]	; (8008390 <MX_USB_DEVICE_Init+0xa0>)
 8008348:	4810      	ldr	r0, [pc, #64]	; (800838c <MX_USB_DEVICE_Init+0x9c>)
 800834a:	f7fe ff61 	bl	8007210 <USBD_RegisterClass>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <MX_USB_DEVICE_Init+0x68>
  {
    Error_Handler();
 8008354:	f7f8 f97c 	bl	8000650 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008358:	490e      	ldr	r1, [pc, #56]	; (8008394 <MX_USB_DEVICE_Init+0xa4>)
 800835a:	480c      	ldr	r0, [pc, #48]	; (800838c <MX_USB_DEVICE_Init+0x9c>)
 800835c:	f7fe fe92 	bl	8007084 <USBD_CDC_RegisterInterface>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <MX_USB_DEVICE_Init+0x7a>
  {
    Error_Handler();
 8008366:	f7f8 f973 	bl	8000650 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800836a:	4808      	ldr	r0, [pc, #32]	; (800838c <MX_USB_DEVICE_Init+0x9c>)
 800836c:	f7fe ff69 	bl	8007242 <USBD_Start>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <MX_USB_DEVICE_Init+0x8a>
  {
    Error_Handler();
 8008376:	f7f8 f96b 	bl	8000650 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40010800 	.word	0x40010800
 8008388:	2000012c 	.word	0x2000012c
 800838c:	200002f4 	.word	0x200002f4
 8008390:	20000018 	.word	0x20000018
 8008394:	2000011c 	.word	0x2000011c

08008398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800839e:	2200      	movs	r2, #0
 80083a0:	4915      	ldr	r1, [pc, #84]	; (80083f8 <CDC_Init_FS+0x60>)
 80083a2:	4816      	ldr	r0, [pc, #88]	; (80083fc <CDC_Init_FS+0x64>)
 80083a4:	f7fe fe84 	bl	80070b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083a8:	4915      	ldr	r1, [pc, #84]	; (8008400 <CDC_Init_FS+0x68>)
 80083aa:	4814      	ldr	r0, [pc, #80]	; (80083fc <CDC_Init_FS+0x64>)
 80083ac:	f7fe fe99 	bl	80070e2 <USBD_CDC_SetRxBuffer>

	  // https://stackoverflow.com/a/26925578
	  uint32_t baudrate = 115200;
 80083b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80083b4:	607b      	str	r3, [r7, #4]
	  lcBuffer[0] = (uint8_t)(baudrate);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <CDC_Init_FS+0x6c>)
 80083bc:	701a      	strb	r2, [r3, #0]
	  lcBuffer[1] = (uint8_t)(baudrate >> 8);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	0a1b      	lsrs	r3, r3, #8
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <CDC_Init_FS+0x6c>)
 80083c6:	705a      	strb	r2, [r3, #1]
	  lcBuffer[2] = (uint8_t)(baudrate >> 16);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	0c1b      	lsrs	r3, r3, #16
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <CDC_Init_FS+0x6c>)
 80083d0:	709a      	strb	r2, [r3, #2]
	  lcBuffer[3] = (uint8_t)(baudrate >> 24);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	0e1b      	lsrs	r3, r3, #24
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <CDC_Init_FS+0x6c>)
 80083da:	70da      	strb	r2, [r3, #3]
	  lcBuffer[4] = 0; // 1 Stop bit
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <CDC_Init_FS+0x6c>)
 80083de:	2200      	movs	r2, #0
 80083e0:	711a      	strb	r2, [r3, #4]
	  lcBuffer[5] = 0; // No parity
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <CDC_Init_FS+0x6c>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	715a      	strb	r2, [r3, #5]
	  lcBuffer[6] = 8; // 8 data bits
 80083e8:	4b06      	ldr	r3, [pc, #24]	; (8008404 <CDC_Init_FS+0x6c>)
 80083ea:	2208      	movs	r2, #8
 80083ec:	719a      	strb	r2, [r3, #6]
  return (USBD_OK);
 80083ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	200006b8 	.word	0x200006b8
 80083fc:	200002f4 	.word	0x200002f4
 8008400:	200005b8 	.word	0x200005b8
 8008404:	200007b8 	.word	0x200007b8

08008408 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800840c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800840e:	4618      	mov	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	bc80      	pop	{r7}
 8008414:	4770      	bx	lr
	...

08008418 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	4603      	mov	r3, r0
 8008420:	6039      	str	r1, [r7, #0]
 8008422:	71fb      	strb	r3, [r7, #7]
 8008424:	4613      	mov	r3, r2
 8008426:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	2b23      	cmp	r3, #35	; 0x23
 800842c:	f200 808e 	bhi.w	800854c <CDC_Control_FS+0x134>
 8008430:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <CDC_Control_FS+0x20>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	0800854d 	.word	0x0800854d
 800843c:	0800854d 	.word	0x0800854d
 8008440:	0800854d 	.word	0x0800854d
 8008444:	0800854d 	.word	0x0800854d
 8008448:	0800854d 	.word	0x0800854d
 800844c:	0800854d 	.word	0x0800854d
 8008450:	0800854d 	.word	0x0800854d
 8008454:	0800854d 	.word	0x0800854d
 8008458:	0800854d 	.word	0x0800854d
 800845c:	0800854d 	.word	0x0800854d
 8008460:	0800854d 	.word	0x0800854d
 8008464:	0800854d 	.word	0x0800854d
 8008468:	0800854d 	.word	0x0800854d
 800846c:	0800854d 	.word	0x0800854d
 8008470:	0800854d 	.word	0x0800854d
 8008474:	0800854d 	.word	0x0800854d
 8008478:	0800854d 	.word	0x0800854d
 800847c:	0800854d 	.word	0x0800854d
 8008480:	0800854d 	.word	0x0800854d
 8008484:	0800854d 	.word	0x0800854d
 8008488:	0800854d 	.word	0x0800854d
 800848c:	0800854d 	.word	0x0800854d
 8008490:	0800854d 	.word	0x0800854d
 8008494:	0800854d 	.word	0x0800854d
 8008498:	0800854d 	.word	0x0800854d
 800849c:	0800854d 	.word	0x0800854d
 80084a0:	0800854d 	.word	0x0800854d
 80084a4:	0800854d 	.word	0x0800854d
 80084a8:	0800854d 	.word	0x0800854d
 80084ac:	0800854d 	.word	0x0800854d
 80084b0:	0800854d 	.word	0x0800854d
 80084b4:	0800854d 	.word	0x0800854d
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	08008503 	.word	0x08008503
 80084c0:	0800854d 	.word	0x0800854d
 80084c4:	0800854d 	.word	0x0800854d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	lcBuffer[0] = pbuf[0];
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	4b22      	ldr	r3, [pc, #136]	; (8008558 <CDC_Control_FS+0x140>)
 80084ce:	701a      	strb	r2, [r3, #0]
        lcBuffer[1] = pbuf[1];
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	785a      	ldrb	r2, [r3, #1]
 80084d4:	4b20      	ldr	r3, [pc, #128]	; (8008558 <CDC_Control_FS+0x140>)
 80084d6:	705a      	strb	r2, [r3, #1]
        lcBuffer[2] = pbuf[2];
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	789a      	ldrb	r2, [r3, #2]
 80084dc:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <CDC_Control_FS+0x140>)
 80084de:	709a      	strb	r2, [r3, #2]
        lcBuffer[3] = pbuf[3];
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	78da      	ldrb	r2, [r3, #3]
 80084e4:	4b1c      	ldr	r3, [pc, #112]	; (8008558 <CDC_Control_FS+0x140>)
 80084e6:	70da      	strb	r2, [r3, #3]
        lcBuffer[4] = pbuf[4];
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	791a      	ldrb	r2, [r3, #4]
 80084ec:	4b1a      	ldr	r3, [pc, #104]	; (8008558 <CDC_Control_FS+0x140>)
 80084ee:	711a      	strb	r2, [r3, #4]
        lcBuffer[5] = pbuf[5];
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	795a      	ldrb	r2, [r3, #5]
 80084f4:	4b18      	ldr	r3, [pc, #96]	; (8008558 <CDC_Control_FS+0x140>)
 80084f6:	715a      	strb	r2, [r3, #5]
        lcBuffer[6] = pbuf[6];
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	799a      	ldrb	r2, [r3, #6]
 80084fc:	4b16      	ldr	r3, [pc, #88]	; (8008558 <CDC_Control_FS+0x140>)
 80084fe:	719a      	strb	r2, [r3, #6]
    break;
 8008500:	e025      	b.n	800854e <CDC_Control_FS+0x136>

    case CDC_GET_LINE_CODING:
        pbuf[0] = lcBuffer[0];
 8008502:	4b15      	ldr	r3, [pc, #84]	; (8008558 <CDC_Control_FS+0x140>)
 8008504:	781a      	ldrb	r2, [r3, #0]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	701a      	strb	r2, [r3, #0]
        pbuf[1] = lcBuffer[1];
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	3301      	adds	r3, #1
 800850e:	4a12      	ldr	r2, [pc, #72]	; (8008558 <CDC_Control_FS+0x140>)
 8008510:	7852      	ldrb	r2, [r2, #1]
 8008512:	701a      	strb	r2, [r3, #0]
        pbuf[2] = lcBuffer[2];
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	3302      	adds	r3, #2
 8008518:	4a0f      	ldr	r2, [pc, #60]	; (8008558 <CDC_Control_FS+0x140>)
 800851a:	7892      	ldrb	r2, [r2, #2]
 800851c:	701a      	strb	r2, [r3, #0]
        pbuf[3] = lcBuffer[3];
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	3303      	adds	r3, #3
 8008522:	4a0d      	ldr	r2, [pc, #52]	; (8008558 <CDC_Control_FS+0x140>)
 8008524:	78d2      	ldrb	r2, [r2, #3]
 8008526:	701a      	strb	r2, [r3, #0]
        pbuf[4] = lcBuffer[4];
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	3304      	adds	r3, #4
 800852c:	4a0a      	ldr	r2, [pc, #40]	; (8008558 <CDC_Control_FS+0x140>)
 800852e:	7912      	ldrb	r2, [r2, #4]
 8008530:	701a      	strb	r2, [r3, #0]
        pbuf[5] = lcBuffer[5];
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	3305      	adds	r3, #5
 8008536:	4a08      	ldr	r2, [pc, #32]	; (8008558 <CDC_Control_FS+0x140>)
 8008538:	7952      	ldrb	r2, [r2, #5]
 800853a:	701a      	strb	r2, [r3, #0]
        pbuf[6] = lcBuffer[6];
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	3306      	adds	r3, #6
 8008540:	4a05      	ldr	r2, [pc, #20]	; (8008558 <CDC_Control_FS+0x140>)
 8008542:	7992      	ldrb	r2, [r2, #6]
 8008544:	701a      	strb	r2, [r3, #0]

        // Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
        CDC_FlushRxBuffer_FS();
 8008546:	f000 f8bf 	bl	80086c8 <CDC_FlushRxBuffer_FS>
    break;
 800854a:	e000      	b.n	800854e <CDC_Control_FS+0x136>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800854c:	bf00      	nop
  }

  return (USBD_OK);
 800854e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	200007b8 	.word	0x200007b8

0800855c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008566:	6879      	ldr	r1, [r7, #4]
 8008568:	4819      	ldr	r0, [pc, #100]	; (80085d0 <CDC_Receive_FS+0x74>)
 800856a:	f7fe fdba 	bl	80070e2 <USBD_CDC_SetRxBuffer>
		uint8_t len = (uint8_t) *Len; // Get length
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	73fb      	strb	r3, [r7, #15]
		uint16_t tempHeadPos = rxBufferHeadPos; // Increment temp head pos while writing, then update main variable when complete
 8008574:	4b17      	ldr	r3, [pc, #92]	; (80085d4 <CDC_Receive_FS+0x78>)
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	82fb      	strh	r3, [r7, #22]

		for (uint32_t i = 0; i < len; i++) {
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	e017      	b.n	80085b0 <CDC_Receive_FS+0x54>
			rxBuffer[tempHeadPos] = Buf[i];
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	441a      	add	r2, r3
 8008586:	8afb      	ldrh	r3, [r7, #22]
 8008588:	7811      	ldrb	r1, [r2, #0]
 800858a:	4a13      	ldr	r2, [pc, #76]	; (80085d8 <CDC_Receive_FS+0x7c>)
 800858c:	54d1      	strb	r1, [r2, r3]
			tempHeadPos = (uint16_t)((uint16_t)(tempHeadPos + 1) % HL_RX_BUFFER_SIZE);
 800858e:	8afb      	ldrh	r3, [r7, #22]
 8008590:	3301      	adds	r3, #1
 8008592:	b29b      	uxth	r3, r3
 8008594:	f003 031f 	and.w	r3, r3, #31
 8008598:	82fb      	strh	r3, [r7, #22]
			if (tempHeadPos == rxBufferTailPos) {
 800859a:	4b10      	ldr	r3, [pc, #64]	; (80085dc <CDC_Receive_FS+0x80>)
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	8afa      	ldrh	r2, [r7, #22]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d101      	bne.n	80085aa <CDC_Receive_FS+0x4e>
			  return USBD_FAIL;
 80085a6:	2302      	movs	r3, #2
 80085a8:	e00d      	b.n	80085c6 <CDC_Receive_FS+0x6a>
		for (uint32_t i = 0; i < len; i++) {
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	3301      	adds	r3, #1
 80085ae:	613b      	str	r3, [r7, #16]
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d3e3      	bcc.n	8008580 <CDC_Receive_FS+0x24>
			}
		}

		rxBufferHeadPos = tempHeadPos;
 80085b8:	4a06      	ldr	r2, [pc, #24]	; (80085d4 <CDC_Receive_FS+0x78>)
 80085ba:	8afb      	ldrh	r3, [r7, #22]
 80085bc:	8013      	strh	r3, [r2, #0]
		USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085be:	4804      	ldr	r0, [pc, #16]	; (80085d0 <CDC_Receive_FS+0x74>)
 80085c0:	f7fe fdd1 	bl	8007166 <USBD_CDC_ReceivePacket>

	  return (USBD_OK);
 80085c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200002f4 	.word	0x200002f4
 80085d4:	200007e0 	.word	0x200007e0
 80085d8:	200007c0 	.word	0x200007c0
 80085dc:	200007e2 	.word	0x200007e2

080085e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085f0:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <CDC_Transmit_FS+0x48>)
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008602:	2301      	movs	r3, #1
 8008604:	e00b      	b.n	800861e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008606:	887b      	ldrh	r3, [r7, #2]
 8008608:	461a      	mov	r2, r3
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	4806      	ldr	r0, [pc, #24]	; (8008628 <CDC_Transmit_FS+0x48>)
 800860e:	f7fe fd4f 	bl	80070b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008612:	4805      	ldr	r0, [pc, #20]	; (8008628 <CDC_Transmit_FS+0x48>)
 8008614:	f7fe fd78 	bl	8007108 <USBD_CDC_TransmitPacket>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200002f4 	.word	0x200002f4

0800862c <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_ReadRxBuffer_FS(uint8_t* Buf, uint16_t Len)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	807b      	strh	r3, [r7, #2]
  uint16_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 8008638:	f000 f830 	bl	800869c <CDC_GetRxBufferBytesAvailable_FS>
 800863c:	4603      	mov	r3, r0
 800863e:	81bb      	strh	r3, [r7, #12]

  if (bytesAvailable < Len)
 8008640:	89ba      	ldrh	r2, [r7, #12]
 8008642:	887b      	ldrh	r3, [r7, #2]
 8008644:	429a      	cmp	r2, r3
 8008646:	d201      	bcs.n	800864c <CDC_ReadRxBuffer_FS+0x20>
    return USB_CDC_RX_BUFFER_NO_DATA;
 8008648:	2301      	movs	r3, #1
 800864a:	e01f      	b.n	800868c <CDC_ReadRxBuffer_FS+0x60>

  for (uint8_t i = 0; i < Len; i++) {
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
 8008650:	e016      	b.n	8008680 <CDC_ReadRxBuffer_FS+0x54>
    Buf[i] = rxBuffer[rxBufferTailPos];
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <CDC_ReadRxBuffer_FS+0x68>)
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	4619      	mov	r1, r3
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	4413      	add	r3, r2
 8008660:	4a0d      	ldr	r2, [pc, #52]	; (8008698 <CDC_ReadRxBuffer_FS+0x6c>)
 8008662:	5c52      	ldrb	r2, [r2, r1]
 8008664:	701a      	strb	r2, [r3, #0]
    rxBufferTailPos = (uint16_t)((uint16_t)(rxBufferTailPos + 1) % HL_RX_BUFFER_SIZE);
 8008666:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <CDC_ReadRxBuffer_FS+0x68>)
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	3301      	adds	r3, #1
 800866e:	b29b      	uxth	r3, r3
 8008670:	f003 031f 	and.w	r3, r3, #31
 8008674:	b29a      	uxth	r2, r3
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <CDC_ReadRxBuffer_FS+0x68>)
 8008678:	801a      	strh	r2, [r3, #0]
  for (uint8_t i = 0; i < Len; i++) {
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	3301      	adds	r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	b29b      	uxth	r3, r3
 8008684:	887a      	ldrh	r2, [r7, #2]
 8008686:	429a      	cmp	r2, r3
 8008688:	d8e3      	bhi.n	8008652 <CDC_ReadRxBuffer_FS+0x26>
  }

  return USB_CDC_RX_BUFFER_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	200007e2 	.word	0x200007e2
 8008698:	200007c0 	.word	0x200007c0

0800869c <CDC_GetRxBufferBytesAvailable_FS>:

  return USB_CDC_RX_BUFFER_OK;
}

uint16_t CDC_GetRxBufferBytesAvailable_FS()
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  return (uint16_t)(rxBufferHeadPos - rxBufferTailPos) % HL_RX_BUFFER_SIZE;
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <CDC_GetRxBufferBytesAvailable_FS+0x24>)
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <CDC_GetRxBufferBytesAvailable_FS+0x28>)
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f003 031f 	and.w	r3, r3, #31
 80086b4:	b29b      	uxth	r3, r3
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	200007e0 	.word	0x200007e0
 80086c4:	200007e2 	.word	0x200007e2

080086c8 <CDC_FlushRxBuffer_FS>:

void CDC_FlushRxBuffer_FS()
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
  for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 80086ce:	2300      	movs	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	e007      	b.n	80086e4 <CDC_FlushRxBuffer_FS+0x1c>
    rxBuffer[i] = 0;
 80086d4:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <CDC_FlushRxBuffer_FS+0x38>)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3301      	adds	r3, #1
 80086e2:	607b      	str	r3, [r7, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b1f      	cmp	r3, #31
 80086e8:	ddf4      	ble.n	80086d4 <CDC_FlushRxBuffer_FS+0xc>
  }

  rxBufferHeadPos = 0;
 80086ea:	4b06      	ldr	r3, [pc, #24]	; (8008704 <CDC_FlushRxBuffer_FS+0x3c>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	801a      	strh	r2, [r3, #0]
  rxBufferTailPos = 0;
 80086f0:	4b05      	ldr	r3, [pc, #20]	; (8008708 <CDC_FlushRxBuffer_FS+0x40>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	801a      	strh	r2, [r3, #0]
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr
 8008700:	200007c0 	.word	0x200007c0
 8008704:	200007e0 	.word	0x200007e0
 8008708:	200007e2 	.word	0x200007e2

0800870c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2212      	movs	r2, #18
 800871c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800871e:	4b03      	ldr	r3, [pc, #12]	; (800872c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20000148 	.word	0x20000148

08008730 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	6039      	str	r1, [r7, #0]
 800873a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2204      	movs	r2, #4
 8008740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008742:	4b03      	ldr	r3, [pc, #12]	; (8008750 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	2000015c 	.word	0x2000015c

08008754 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d105      	bne.n	8008772 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	4907      	ldr	r1, [pc, #28]	; (8008788 <USBD_FS_ProductStrDescriptor+0x34>)
 800876a:	4808      	ldr	r0, [pc, #32]	; (800878c <USBD_FS_ProductStrDescriptor+0x38>)
 800876c:	f7ff fce2 	bl	8008134 <USBD_GetString>
 8008770:	e004      	b.n	800877c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	4904      	ldr	r1, [pc, #16]	; (8008788 <USBD_FS_ProductStrDescriptor+0x34>)
 8008776:	4805      	ldr	r0, [pc, #20]	; (800878c <USBD_FS_ProductStrDescriptor+0x38>)
 8008778:	f7ff fcdc 	bl	8008134 <USBD_GetString>
  }
  return USBD_StrDesc;
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200007e4 	.word	0x200007e4
 800878c:	08008f08 	.word	0x08008f08

08008790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	4904      	ldr	r1, [pc, #16]	; (80087b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087a0:	4804      	ldr	r0, [pc, #16]	; (80087b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087a2:	f7ff fcc7 	bl	8008134 <USBD_GetString>
  return USBD_StrDesc;
 80087a6:	4b02      	ldr	r3, [pc, #8]	; (80087b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	200007e4 	.word	0x200007e4
 80087b4:	08008f20 	.word	0x08008f20

080087b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	6039      	str	r1, [r7, #0]
 80087c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	221a      	movs	r2, #26
 80087c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087ca:	f000 f843 	bl	8008854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ce:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20000160 	.word	0x20000160

080087dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d105      	bne.n	80087fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	4907      	ldr	r1, [pc, #28]	; (8008810 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087f2:	4808      	ldr	r0, [pc, #32]	; (8008814 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087f4:	f7ff fc9e 	bl	8008134 <USBD_GetString>
 80087f8:	e004      	b.n	8008804 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	4904      	ldr	r1, [pc, #16]	; (8008810 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087fe:	4805      	ldr	r0, [pc, #20]	; (8008814 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008800:	f7ff fc98 	bl	8008134 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	200007e4 	.word	0x200007e4
 8008814:	08008f34 	.word	0x08008f34

08008818 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	6039      	str	r1, [r7, #0]
 8008822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	4907      	ldr	r1, [pc, #28]	; (800884c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800882e:	4808      	ldr	r0, [pc, #32]	; (8008850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008830:	f7ff fc80 	bl	8008134 <USBD_GetString>
 8008834:	e004      	b.n	8008840 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	4904      	ldr	r1, [pc, #16]	; (800884c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800883a:	4805      	ldr	r0, [pc, #20]	; (8008850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800883c:	f7ff fc7a 	bl	8008134 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008840:	4b02      	ldr	r3, [pc, #8]	; (800884c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	200007e4 	.word	0x200007e4
 8008850:	08008f40 	.word	0x08008f40

08008854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <Get_SerialNum+0x44>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <Get_SerialNum+0x48>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008866:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <Get_SerialNum+0x4c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800887a:	2208      	movs	r2, #8
 800887c:	4909      	ldr	r1, [pc, #36]	; (80088a4 <Get_SerialNum+0x50>)
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 f814 	bl	80088ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008884:	2204      	movs	r2, #4
 8008886:	4908      	ldr	r1, [pc, #32]	; (80088a8 <Get_SerialNum+0x54>)
 8008888:	68b8      	ldr	r0, [r7, #8]
 800888a:	f000 f80f 	bl	80088ac <IntToUnicode>
  }
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	1ffff7e8 	.word	0x1ffff7e8
 800889c:	1ffff7ec 	.word	0x1ffff7ec
 80088a0:	1ffff7f0 	.word	0x1ffff7f0
 80088a4:	20000162 	.word	0x20000162
 80088a8:	20000172 	.word	0x20000172

080088ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]
 80088c2:	e027      	b.n	8008914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	2b09      	cmp	r3, #9
 80088ca:	d80b      	bhi.n	80088e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	0f1b      	lsrs	r3, r3, #28
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	4619      	mov	r1, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	440b      	add	r3, r1
 80088dc:	3230      	adds	r2, #48	; 0x30
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	e00a      	b.n	80088fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	440b      	add	r3, r1
 80088f4:	3237      	adds	r2, #55	; 0x37
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	3301      	adds	r3, #1
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	4413      	add	r3, r2
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	3301      	adds	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
 8008914:	7dfa      	ldrb	r2, [r7, #23]
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d3d3      	bcc.n	80088c4 <IntToUnicode+0x18>
  }
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	bc80      	pop	{r7}
 8008926:	4770      	bx	lr

08008928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a0d      	ldr	r2, [pc, #52]	; (800896c <HAL_PCD_MspInit+0x44>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d113      	bne.n	8008962 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800893a:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <HAL_PCD_MspInit+0x48>)
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	4a0c      	ldr	r2, [pc, #48]	; (8008970 <HAL_PCD_MspInit+0x48>)
 8008940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008944:	61d3      	str	r3, [r2, #28]
 8008946:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <HAL_PCD_MspInit+0x48>)
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	2014      	movs	r0, #20
 8008958:	f7f8 f86d 	bl	8000a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800895c:	2014      	movs	r0, #20
 800895e:	f7f8 f886 	bl	8000a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	40005c00 	.word	0x40005c00
 8008970:	40021000 	.word	0x40021000

08008974 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008988:	4619      	mov	r1, r3
 800898a:	4610      	mov	r0, r2
 800898c:	f7fe fca1 	bl	80072d2 <USBD_LL_SetupStage>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	440b      	add	r3, r1
 80089b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	4619      	mov	r1, r3
 80089c2:	f7fe fcd3 	bl	800736c <USBD_LL_DataOutStage>
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	460b      	mov	r3, r1
 80089d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80089e0:	78fa      	ldrb	r2, [r7, #3]
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	440b      	add	r3, r1
 80089ee:	333c      	adds	r3, #60	; 0x3c
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	78fb      	ldrb	r3, [r7, #3]
 80089f4:	4619      	mov	r1, r3
 80089f6:	f7fe fd2a 	bl	800744e <USBD_LL_DataInStage>
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fe3a 	bl	800768a <USBD_LL_SOF>
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a26:	2301      	movs	r3, #1
 8008a28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d001      	beq.n	8008a36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a32:	f7f7 fe0d 	bl	8000650 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a3c:	7bfa      	ldrb	r2, [r7, #15]
 8008a3e:	4611      	mov	r1, r2
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe fdea 	bl	800761a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fe fda3 	bl	8007598 <USBD_LL_Reset>
}
 8008a52:	bf00      	nop
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe fde4 	bl	8007638 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <HAL_PCD_SuspendCallback+0x30>)
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	4a03      	ldr	r2, [pc, #12]	; (8008a8c <HAL_PCD_SuspendCallback+0x30>)
 8008a7e:	f043 0306 	orr.w	r3, r3, #6
 8008a82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	e000ed00 	.word	0xe000ed00

08008a90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fdde 	bl	8007660 <USBD_LL_Resume>
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ab4:	4a28      	ldr	r2, [pc, #160]	; (8008b58 <USBD_LL_Init+0xac>)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a26      	ldr	r2, [pc, #152]	; (8008b58 <USBD_LL_Init+0xac>)
 8008ac0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ac4:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <USBD_LL_Init+0xac>)
 8008ac6:	4a25      	ldr	r2, [pc, #148]	; (8008b5c <USBD_LL_Init+0xb0>)
 8008ac8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008aca:	4b23      	ldr	r3, [pc, #140]	; (8008b58 <USBD_LL_Init+0xac>)
 8008acc:	2208      	movs	r2, #8
 8008ace:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ad0:	4b21      	ldr	r3, [pc, #132]	; (8008b58 <USBD_LL_Init+0xac>)
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ad6:	4b20      	ldr	r3, [pc, #128]	; (8008b58 <USBD_LL_Init+0xac>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008adc:	4b1e      	ldr	r3, [pc, #120]	; (8008b58 <USBD_LL_Init+0xac>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008ae2:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <USBD_LL_Init+0xac>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ae8:	481b      	ldr	r0, [pc, #108]	; (8008b58 <USBD_LL_Init+0xac>)
 8008aea:	f7f9 f945 	bl	8001d78 <HAL_PCD_Init>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008af4:	f7f7 fdac 	bl	8000650 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008afe:	2318      	movs	r3, #24
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	f7fa fdb9 	bl	800367a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b0e:	2358      	movs	r3, #88	; 0x58
 8008b10:	2200      	movs	r2, #0
 8008b12:	2180      	movs	r1, #128	; 0x80
 8008b14:	f7fa fdb1 	bl	800367a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b1e:	23c0      	movs	r3, #192	; 0xc0
 8008b20:	2200      	movs	r2, #0
 8008b22:	2181      	movs	r1, #129	; 0x81
 8008b24:	f7fa fda9 	bl	800367a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008b32:	2200      	movs	r2, #0
 8008b34:	2101      	movs	r1, #1
 8008b36:	f7fa fda0 	bl	800367a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b44:	2200      	movs	r2, #0
 8008b46:	2182      	movs	r1, #130	; 0x82
 8008b48:	f7fa fd97 	bl	800367a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200009e4 	.word	0x200009e4
 8008b5c:	40005c00 	.word	0x40005c00

08008b60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7f9 fa09 	bl	8001f8e <HAL_PCD_Start>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 f94e 	bl	8008e24 <USBD_Get_USB_Status>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	4608      	mov	r0, r1
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	70fb      	strb	r3, [r7, #3]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70bb      	strb	r3, [r7, #2]
 8008bac:	4613      	mov	r3, r2
 8008bae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bbe:	78bb      	ldrb	r3, [r7, #2]
 8008bc0:	883a      	ldrh	r2, [r7, #0]
 8008bc2:	78f9      	ldrb	r1, [r7, #3]
 8008bc4:	f7f9 fb81 	bl	80022ca <HAL_PCD_EP_Open>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f928 	bl	8008e24 <USBD_Get_USB_Status>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bfc:	78fa      	ldrb	r2, [r7, #3]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7f9 fbc8 	bl	8002396 <HAL_PCD_EP_Close>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 f909 	bl	8008e24 <USBD_Get_USB_Status>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c3a:	78fa      	ldrb	r2, [r7, #3]
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f9 fc88 	bl	8002554 <HAL_PCD_EP_SetStall>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f8ea 	bl	8008e24 <USBD_Get_USB_Status>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	460b      	mov	r3, r1
 8008c68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c78:	78fa      	ldrb	r2, [r7, #3]
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7f9 fcc9 	bl	8002614 <HAL_PCD_EP_ClrStall>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 f8cb 	bl	8008e24 <USBD_Get_USB_Status>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	da0c      	bge.n	8008cd2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cbe:	68f9      	ldr	r1, [r7, #12]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	440b      	add	r3, r1
 8008ccc:	3302      	adds	r3, #2
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	e00b      	b.n	8008cea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ce8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bc80      	pop	{r7}
 8008cf2:	4770      	bx	lr

08008cf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7f9 fab4 	bl	8002280 <HAL_PCD_SetAddress>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f880 	bl	8008e24 <USBD_Get_USB_Status>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b086      	sub	sp, #24
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	460b      	mov	r3, r1
 8008d40:	72fb      	strb	r3, [r7, #11]
 8008d42:	4613      	mov	r3, r2
 8008d44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d54:	893b      	ldrh	r3, [r7, #8]
 8008d56:	7af9      	ldrb	r1, [r7, #11]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	f7f9 fbb8 	bl	80024ce <HAL_PCD_EP_Transmit>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 f85d 	bl	8008e24 <USBD_Get_USB_Status>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	607a      	str	r2, [r7, #4]
 8008d82:	461a      	mov	r2, r3
 8008d84:	460b      	mov	r3, r1
 8008d86:	72fb      	strb	r3, [r7, #11]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d9a:	893b      	ldrh	r3, [r7, #8]
 8008d9c:	7af9      	ldrb	r1, [r7, #11]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	f7f9 fb41 	bl	8002426 <HAL_PCD_EP_Receive>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 f83a 	bl	8008e24 <USBD_Get_USB_Status>
 8008db0:	4603      	mov	r3, r0
 8008db2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008db4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dd0:	78fa      	ldrb	r2, [r7, #3]
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7f9 fb63 	bl	80024a0 <HAL_PCD_EP_GetRxCount>
 8008dda:	4603      	mov	r3, r0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <USBD_static_malloc+0x14>)
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bc80      	pop	{r7}
 8008df6:	4770      	bx	lr
 8008df8:	20000cd0 	.word	0x20000cd0

08008dfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr

08008e0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	460b      	mov	r3, r1
 8008e18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d817      	bhi.n	8008e68 <USBD_Get_USB_Status+0x44>
 8008e38:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <USBD_Get_USB_Status+0x1c>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008e51 	.word	0x08008e51
 8008e44:	08008e57 	.word	0x08008e57
 8008e48:	08008e5d 	.word	0x08008e5d
 8008e4c:	08008e63 	.word	0x08008e63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
    break;
 8008e54:	e00b      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e56:	2302      	movs	r3, #2
 8008e58:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5a:	e008      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e60:	e005      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e62:	2302      	movs	r3, #2
 8008e64:	73fb      	strb	r3, [r7, #15]
    break;
 8008e66:	e002      	b.n	8008e6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6c:	bf00      	nop
  }
  return usb_status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop

08008e7c <__libc_init_array>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	2600      	movs	r6, #0
 8008e80:	4d0c      	ldr	r5, [pc, #48]	; (8008eb4 <__libc_init_array+0x38>)
 8008e82:	4c0d      	ldr	r4, [pc, #52]	; (8008eb8 <__libc_init_array+0x3c>)
 8008e84:	1b64      	subs	r4, r4, r5
 8008e86:	10a4      	asrs	r4, r4, #2
 8008e88:	42a6      	cmp	r6, r4
 8008e8a:	d109      	bne.n	8008ea0 <__libc_init_array+0x24>
 8008e8c:	f000 f822 	bl	8008ed4 <_init>
 8008e90:	2600      	movs	r6, #0
 8008e92:	4d0a      	ldr	r5, [pc, #40]	; (8008ebc <__libc_init_array+0x40>)
 8008e94:	4c0a      	ldr	r4, [pc, #40]	; (8008ec0 <__libc_init_array+0x44>)
 8008e96:	1b64      	subs	r4, r4, r5
 8008e98:	10a4      	asrs	r4, r4, #2
 8008e9a:	42a6      	cmp	r6, r4
 8008e9c:	d105      	bne.n	8008eaa <__libc_init_array+0x2e>
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea4:	4798      	blx	r3
 8008ea6:	3601      	adds	r6, #1
 8008ea8:	e7ee      	b.n	8008e88 <__libc_init_array+0xc>
 8008eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eae:	4798      	blx	r3
 8008eb0:	3601      	adds	r6, #1
 8008eb2:	e7f2      	b.n	8008e9a <__libc_init_array+0x1e>
 8008eb4:	08008f68 	.word	0x08008f68
 8008eb8:	08008f68 	.word	0x08008f68
 8008ebc:	08008f68 	.word	0x08008f68
 8008ec0:	08008f6c 	.word	0x08008f6c

08008ec4 <memset>:
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	4402      	add	r2, r0
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d100      	bne.n	8008ece <memset+0xa>
 8008ecc:	4770      	bx	lr
 8008ece:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed2:	e7f9      	b.n	8008ec8 <memset+0x4>

08008ed4 <_init>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr

08008ee0 <_fini>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr
